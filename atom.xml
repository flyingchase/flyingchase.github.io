<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://flyingchase.github.io</id>
    <title>flyingchase</title>
    <updated>2021-08-30T07:04:57.477Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://flyingchase.github.io"/>
    <link rel="self" href="https://flyingchase.github.io/atom.xml"/>
    <subtitle>记录成长的脚印</subtitle>
    <logo>https://flyingchase.github.io/images/avatar.png</logo>
    <icon>https://flyingchase.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, flyingchase</rights>
    <entry>
        <title type="html"><![CDATA[# idea 单元测试]]></title>
        <id>https://flyingchase.github.io/post/idea-dan-yuan-ce-shi/</id>
        <link href="https://flyingchase.github.io/post/idea-dan-yuan-ce-shi/">
        </link>
        <updated>2021-08-30T07:04:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装插件">安装插件</h2>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/ovrMKQ.png" alt="ovrMKQ" loading="lazy"></figure>
<h2 id="配置-test-目录">配置 test 目录</h2>
<ul>
<li>
<p>在 src 同级生成 test 目录</p>
</li>
<li>
<p>右键 test 目录设为 test resourceroot</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/JQtpJv.png" alt="JQtpJv" loading="lazy"></figure>
</li>
</ul>
<h2 id="生成测试类">生成测试类</h2>
<ul>
<li>
<p>在待测试的类或者方法上使用快捷键 <code>cmd+shift+t</code></p>
</li>
<li>
<p>选择 Junit5 + 待测方法名</p>
</li>
<li>
<p>自动上设置的test 目录新建对应 package 下的测试类</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/t4PxEI.png" alt="t4PxEI" loading="lazy"></figure>
</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/Cf7oFg.png" alt="Cf7oFg" loading="lazy"></figure>
<h2 id="编写测试代码">编写测试代码</h2>
<ul>
<li>使用 new 创建原先的代码类并传入方法</li>
<li>使用<code>assertEquals</code>等进行测试</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[位移运算]]></title>
        <id>https://flyingchase.github.io/post/wei-yi-yun-suan/</id>
        <link href="https://flyingchase.github.io/post/wei-yi-yun-suan/">
        </link>
        <updated>2021-08-21T06:40:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="01-位移运算">01 位移运算</h3>
<ul>
<li>
<p>左移 扩大</p>
<ul>
<li>
<p><code>1&gt;&gt;4</code> 即1 * 2 * 2 * 2 * 2 = 16 左移 4 位即pow（2,4）</p>
</li>
<li>
<p>Java提供的位运算符有：左移( <code>&lt;&lt;</code> )、右移( <code>&gt;&gt;</code> ) 、无符号右移( <code>&gt;&gt;&gt;</code> ) 、位与( <code>&amp;</code> ) 、位或( <code>|</code> )、位非( <code>~</code> )、位异或( <code>^</code> )，除了位非( <code>~</code> )是一元操作符外，其它的都是二元操作符。</p>
<h4 id="1-左移">1. 左移( &lt;&lt; )</h4>
<p>a &lt;&lt; b 表示将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向左方向移动 b 位，符号位不变，低位空出来的位补数值 0。</p>
<pre><code class="language-shell">a &lt;&lt; b = a * (2 ^ b)
</code></pre>
<h4 id="2-右移">2. 右移( &gt;&gt; )</h4>
<p><strong>a &gt;&gt; b</strong> 表示将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向右方向移动 b 位，符号位不变，高位空出来的位补数值 0。</p>
<pre><code>a &gt;&gt; b = a / ( 2 ^ b )
</code></pre>
<h4 id="3-无符号右移">3. 无符号右移( &gt;&gt;&gt; )</h4>
<p>无符号右移运算符&gt;&gt;&gt;和右移运算符&gt;&gt;是一样的，只不过右移时左边是补上符号位，而无符号右移运算符是补上0，也就是说，对于正数移位来说等同于：&gt;&gt;，负数通过此移位运算符能移位成正数。</p>
<h4 id="4-位与">4. 位与( &amp; )</h4>
<p>与运算时，进行运算的两个数，从最低位到最高位，一一对应。如果某 bit 的两个数值对应的值都是 1，则结果值相应的 bit 就是 1，否则为 0.</p>
<pre><code class="language-java">0 &amp; 0 = 0,

0 &amp; 1 = 0,

1 &amp; 1 = 1
</code></pre>
<h4 id="5-位或">5. 位或( | )</h4>
<p>与运算时，进行运算的两个数，从最低位到最高位，一一对应。如果某 bit 的两个数值对应的值只要 1 个为 1，则结果值相应的 bit 就是 1，否则为 0。</p>
<pre><code class="language-java">0 | 0 = 0,

0 | 1 = 1,

1 | 1 = 1
</code></pre>
<h4 id="6-位异或">6. 位异或( ^ )</h4>
<p>两个操作数进行异或时，对于同一位上，如果数值相同则为 0，数值不同则为 1。</p>
<pre><code class="language-java">1 ^ 0 = 1,

1 ^ 1 = 0,

0 ^ 0 = 0;
</code></pre>
<h4 id="7-位非-~">7. 位非( ~ )</h4>
<p>对操作数的每一位进行操作，1 变成 0，0 变成 1。</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[String 总结]]></title>
        <id>https://flyingchase.github.io/post/string-zong-jie/</id>
        <link href="https://flyingchase.github.io/post/string-zong-jie/">
        </link>
        <updated>2021-08-20T07:31:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="string">String</h2>
<pre><code class="language-java">// 1. 基本操作
    charAt(),substring()
    ch = st.toCharArray(); // 字符串转换为字符数组.
// 2. 比较
    if(!this.name.equals(s1.name)){
         return this.name.compareTo(s1.name);
    }
// 3.StringBuilder比较
	s1.toString().equals(s2.toString())

</code></pre>
<ul>
<li>
<p><strong>替换/循环移动</strong></p>
<ul>
<li>使用 charAt(index)和 subSrting(index)（index 和后直到字符串结尾的整个子串）循环移动子串</li>
</ul>
</li>
<li>
<p><strong>split</strong></p>
<ul>
<li>String[] line =  str.split(“ ”) //以空格划分</li>
<li>Sting s =line[1].split(“\\.”)  // 以.划分</li>
</ul>
</li>
<li>
<p><strong>子串后缀链接</strong></p>
<ul>
<li>
<pre><code class="language-java">String temp  =&quot;&quot;;
// 从后往前遍历 sting 
for(int i=domains.leng-1;i&gt;=0;i--) {
    // 保证子串不断增长
    temp = domains[i] + (temp.equals(&quot;&quot;)?temp:&quot;.&quot;+temp);
}
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>遍历中使用subString获得后续子串</strong></p>
<ul>
<li>
<pre><code class="language-java">for (String cd : cpdomains) {
	// ues indexOf 确定''划分的位置下标
    int i = cd.indexOf(' ');
    // ues subString 获得空格前的数值 Integer.valueOf 转化
    int n = Integer.valueOf(cd.substring(0, i));
    
    String s = cd.substring(i + 1);
    for (i = 0; i &lt; s.length(); ++i) {
        if (s.charAt(i) == '.') {
            // 获得'.'划分的子缀 正向遍历不丢失后续信息
            String d = s.substring(i + 1);
            count.put(d, count.getOrDefault(d, 0) + n);
        }
    }
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>筛选：</strong></p>
<ul>
<li>LC811</li>
</ul>
</li>
</ul>
<h3 id="tips">Tips</h3>
<h4 id="替换字符">替换字符</h4>
<h5 id="思路">思路</h5>
<ul>
<li>
<p>使用 <code>HashSet</code>保存替换的字典集  Arrays.asList(‘...’)作为参数 保存为 private static final 类型</p>
<pre><code class="language-java">private static final HashSet&lt;Character&gt; vowels = new HashSet&lt;&gt;(
        Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));
</code></pre>
</li>
<li>
<p>使用 <code>s.split(“ ”)</code>删除空格字符</p>
</li>
<li>
<p>使用 <code>StringBuilder</code>作为append的新字符串 最后 toString返回</p>
</li>
</ul>
<h5 id="codes">Codes</h5>
<pre><code class="language-java">private static final HashSet&lt;Character&gt; vowels = new HashSet&lt;&gt;(
        Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));

public String toGoatLatin(String S) {
    if (S == null || S.length() == 0) {
        return &quot;&quot;;
    }

    StringBuilder sb = new StringBuilder();
    StringBuilder suffix = new StringBuilder(&quot;a&quot;);

    for (String w : S.split(&quot; &quot;)) {
        // 保证前导“ ”在非第一个字符前出现
        if (sb.length() != 0) {
            sb.append(&quot; &quot;);
        }
		// 暂存 w 的首字符 判断是否是元音
        char fChar = w.charAt(0);
        if (vowels.contains(fChar)) {
            sb.append(w);
        } else {
            // 使用 subString 链接除首字符外的字符串
            sb.append(w.substring(1));
            // 再将暂存的首字符追加
            sb.append(fChar);
        }
		// 连续追加
        sb.append(&quot;ma&quot;).append(suffix);
		// 保证后缀a 随字符的下标增加
        suffix.append(&quot;a&quot;);
    }
    // System.out.println(&quot;sb.toString() = &quot; + sb.toString());
    return sb.toString();
}
</code></pre>
<ul>
<li></li>
</ul>
<h3 id="sb">sb</h3>
<ul>
<li>
<p><strong>连续追加</strong></p>
<ul>
<li><code>Sb.append(“aa”).append(“string”)</code></li>
</ul>
</li>
<li>
<p><strong>构建二维 string</strong></p>
<ul>
<li>
<pre><code class="language-java">StringBuffer[] sb = new StringBuffer[len];
for (int i = 0; i &lt; sb.length; i++) sb[i] = new StringBuffer();
</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Array 总结]]></title>
        <id>https://flyingchase.github.io/post/array-zong-jie/</id>
        <link href="https://flyingchase.github.io/post/array-zong-jie/">
        </link>
        <updated>2021-08-20T07:30:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="array-数组">Array 数组</h2>
<ol>
<li>相对于array，ArrayList特点：<br>
动态改变大小，如果事先知道大小，并且不会改变可以使用Array<br>
存储需要的空间更多<br>
编译时检查类型是否正确<br>
只能保存封装类<br>
可以通过iterator遍历<br>
size获取存储元素的个数,array中length获取数组长度<br>
不支持多维</li>
<li>list接口<br>
add(),get(int index),remove(int index),set(),clear()<br>
ArrayList类的特点：底层是数组结构，查询快，增删慢；线程不安全，效率高<br>
Vector类的特点：底层是数组机构，查询快，增删慢；线程安全，效率低<br>
LinkedList类的特点：底层是链表结构，增删快，查询慢；线程不安全，效率低<br>
removeall:比较参数collection的对象是否包含，如果包含则删除，复杂度O(n^2)<br>
clear：将所有元素置为空</li>
<li>array操作</li>
</ol>
<p><strong>memset：</strong><code>Arrays.fill()</code><br>
<strong>sort:</strong><code>Arrays.sort()</code><br>
<strong>bsearch:</strong> <code>Arrays.binarySearch()</code>   must be sorted</p>
<pre><code class="language-java">int ind = Arrays.binarySearch(students, 0,N,student);//类中需要重构equals函数和compareTo函数


 public int compareTo(Student student) {
      return sid.compareTo(student.sid);
  }
  @Override
  public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      Student student = (Student) o;
     return Objects.equals(sid, student.sid);
 }
int dir[][]={{1,0},{-1,0},{0,1},{0,-1}};
  	
</code></pre>
<ol start="4">
<li>
<p>数组反转<br>
<code>Collections.reverse(buf);</code></p>
</li>
<li>
<p>寻找一个集合的最大元素</p>
</li>
<li>
<p>Arrays.sort()然后取第一个元素</p>
</li>
<li>
<p><code>Collection.max()</code></p>
</li>
<li>
<p>两种复制方法<br>
System.arraycopy(arr1, 0, arr2, 0, arr1.length);<br>
arr2 = Arrays.copyOf(arr1, arr1.length * 2);</p>
</li>
</ol>
<h3 id="tips">Tips</h3>
<h4 id="右移数组">右移数组</h4>
<p>思路： k%=n;保证 k在数组长度 n 之内</p>
<pre><code class="language-java">reverse(nums,0,n-k-1);
reverse(nums,n-k,n-1);
reverse(nums,0,n-1);
</code></pre>
<h4 id="o1删除重复元素">O(1)删除重复元素</h4>
<p>思路：从j=0 i=0开始 i 遍历数组  当两指针指向不相等时候++j; A[j]=A[i];</p>
<pre><code class="language-java">public int removeDuplicates(int[] A) {
    // return the length of A
    if (A.length==0) return 0;
    int j=0;
    // 不断与下一个元素比较 不同则替换为下一元素
    for (int i=0; i&lt;A.length; i++)
        if (A[i]!=A[j]) A[++j]=A[i];
    return ++j;
}
</code></pre>
<h4 id="找到升序的下一个稍大排列">找到升序的下一个稍大排列</h4>
<p>思路：</p>
<ul>
<li>
<p>从后向前遍历数组 找到非升序的转折点</p>
</li>
<li>
<p>从转折点向后找 找到转折点后最小的数字 并交换转折点和其后的最小位置  即为下一个稍大的排列</p>
</li>
</ul>
<pre><code class="language-java">public int[] nextPermutation(int[] nums) {
    int len = nums.length;
    if ( len &lt;= 1)
        return nums;
    int i = len - 1; 
    // 从后向前找到非递增的转折点
    while (i &gt; 0 &amp;&amp; nums[i] &lt;= nums[i - 1])
        i --;
    // 区间逆转 将转折点及后续部分逆转
    swapList(nums, i, len - 1);
    if (i != 0) {
        int j = i;
        while (nums[j] &lt;= nums[i - 1]) j++;
        // 找到转折点后稍大的数字并交换位置
        swapItem(nums, j, i-1);
    }
    return nums;
}
</code></pre>
<p>全部代码：</p>
<pre><code class="language-java">public void nextPermutation(int[] A) {
    if(A == null || A.length &lt;= 1) return;
    int i = A.length - 2;
    while(i &gt;= 0 &amp;&amp; A[i] &gt;= A[i + 1]) i--; // Find 1st id i that breaks descending order
    if(i &gt;= 0) {                           // If not entirely descending
        int j = A.length - 1;              // Start from the end
        while(A[j] &lt;= A[i]) j--;           // Find rightmost first larger id j
        swap(A, i, j);                     // Switch i and j
    }
    reverse(A, i + 1, A.length - 1);       // Reverse the descending sequence
}

public void swap(int[] A, int i, int j) {
    int tmp = A[i];
    A[i] = A[j];
    A[j] = tmp;
}

public void reverse(int[] A, int i, int j) {
    while(i &lt; j) swap(A, i++, j--);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉树的非递归遍历算法]]></title>
        <id>https://flyingchase.github.io/post/er-cha-shu-de-fei-di-gui-bian-li-suan-fa/</id>
        <link href="https://flyingchase.github.io/post/er-cha-shu-de-fei-di-gui-bian-li-suan-fa/">
        </link>
        <updated>2021-07-02T10:13:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="非递归遍历二叉树">非递归遍历二叉树</h2>
<hr>
<p>递归本质上就是栈 由于二叉树提供节点只能向下访问 无法返回 故而使用栈结构实现返回</p>
<pre><code class="language-java">public static List&lt;Integer&gt; inOrderTraversalBT(TreeNode root) {
    List&lt;Integer&gt; res = new ArrayList&lt;&gt;();
    //空树则直接返回null的res
    if (root == null) {
        return res;
    }
    Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();
    // 保存root
    TreeNode cur = root;
    while (cur != null || !stack.isEmpty()) {
        // 向树的最左侧走 并不断压栈
        while (cur != null) {
            stack.push(cur);
            cur = cur.left;
        }
        // 走完最左侧后弹栈顶
        TreeNode node = stack.pop();
        res.add(node.val);
        // 往上层的右边去再重复找最左侧
        cur = node.right;
    }
    return res;
}


public static List&lt;Integer&gt; preOrderTraversalBT(TreeNode root) {
    List&lt;Integer&gt; res = new ArrayList&lt;&gt;();
    //空树则直接返回null的res
    if (root == null) {
        return res;
    }
    Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();
    // 保存root
    TreeNode cur = root;
    while (cur != null || !stack.isEmpty()) {
        // 向树的最左侧走 并不断压栈入数组
        while (cur != null) {
            res.add(cur.val);
            stack.push(cur);
            cur = cur.left;
        }
        // 走完最左侧后弹栈顶 无须入组 cur循环内已经入组
        TreeNode node = stack.pop();
        // 往上层的右边去 再重复找最左侧
        cur = node.right;
    }

    return res;
}


public static List&lt;Integer&gt; postOrderTraversalBT(TreeNode root) {
    List&lt;Integer&gt; res = new ArrayList&lt;&gt;();
    //空树则直接返回null的res
    if (root == null) {
        return res;
    }
    Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();
    // 保存root
    TreeNode cur = root;
    while (cur != null || !stack.isEmpty()) {
        // 向树的最右侧走 并不断压栈入数组
        while (cur != null) {
            res.add(cur.val);
            stack.push(cur);
            cur = cur.right; // 使得reverse后正常左在前
        }
        // 走完最右侧后弹栈顶 无须入组 cur循环内已经入组
        TreeNode node = stack.pop();
        // 往上层的左边去 再重复找最右侧
        cur=node.left;
    }
    Collections.reverse(res);
    return res;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git常见问题汇总]]></title>
        <id>https://flyingchase.github.io/post/git-chang-jian-wen-ti-hui-zong/</id>
        <link href="https://flyingchase.github.io/post/git-chang-jian-wen-ti-hui-zong/">
        </link>
        <updated>2021-06-28T06:08:25.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>整理收集于互联网</p>
</blockquote>
<h3 id="1修改提交信息">1.修改提交信息</h3>
<p>重写<code>commit</code></p>
<pre><code class="language-shell">git commit --amend -m &quot;new message&quot;
</code></pre>
<h3 id="2添加文件到最后一次提交">2.添加文件到最后一次提交</h3>
<p><code>git push</code> 后新增文件到最后一次提交</p>
<pre><code class="language-shell">git add &lt;file_name&gt;git commit --amend HEAD~1
</code></pre>
<h3 id="3撤消提交">3.撤消提交</h3>
<p>如果要撤消最近一次提交但保留更改，可执行以下操作：</p>
<pre><code class="language-shell">git reset --soft HEAD~1
</code></pre>
<p>如果要撤消提交和更改，可执行以下操作：——&gt;丢弃更改</p>
<pre><code class="language-shell">git reset --hard HEAD~1
</code></pre>
<p>如果要撤消所有的本地更改，则可以重置为分支的原始版本：</p>
<pre><code class="language-shell">git reset --hard origin/&lt;branch_name&gt;
</code></pre>
<p>如果要撤消提交而不修改现有历史记录，则可以使用 git revert，此命令通过创建新的提交来撤消提交。</p>
<pre><code class="language-shell">git revert HEAD
</code></pre>
<p>撤消已经推送到远程分支的合并提交的安全方法是使用 git revert 命令：</p>
<pre><code class="language-shell">git revert -m 1 &lt;commit_id&gt;
</code></pre>
<p>commit_id 是要还原的合并提交 id。</p>
<p>注意要点：</p>
<ol>
<li>可以撤消任意数量的提交。例如：<code>git reset HEAD~3</code>（返回 HEAD 之前的 3 个提交)；<code>git reset --hard &lt;commit_id&gt;</code>（返回特定的提交）。</li>
<li>如果尚未推送提交，并且你不想引入糟糕的提交到远程分支，可以使用 git reset。</li>
<li>使用 git revert 还原已经推送到远程分支的合并提交。</li>
<li>使用 git log 查看提交历史。</li>
</ol>
<pre><code class="language-bash"># 删除 untracked files 
git clean -f
 
# 连 untracked 的目录也一起删掉
git clean -fd
 
# 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）
git clean -xfd
 
# 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删
git clean -nxfd
git clean -nf
git clean -nfd
</code></pre>
<h3 id="4-git命令显示中文路径">4. Git命令显示中文路径</h3>
<pre><code class="language-shell">git config --global core.quotePath false
</code></pre>
<h3 id="5-指定文件的历史修改记录">5. 指定文件的历史修改记录</h3>
<pre><code class="language-shell">git log --follow -p 文件名
</code></pre>
<h3 id="6-指定提交的修改记录">6. 指定提交的修改记录</h3>
<pre><code class="language-shell"># 查看commit提交修改的文件git show --stat &lt;commit的代号&gt;#查看commit提交修改的文件及内容git show &lt;commit的代号&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java-集合]]></title>
        <id>https://flyingchase.github.io/post/java-ji-he/</id>
        <link href="https://flyingchase.github.io/post/java-ji-he/">
        </link>
        <updated>2021-06-02T09:08:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="13-类集合框架">13 类集合框架</h2>
<hr>
<p>Collection定义的方法:</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/NpsW79.png" alt="NpsW79" loading="lazy"></figure>
<p>单列集合+双列集合</p>
<p>Collection接口有两个子接口 list Set实现的子类均为单列集合 Map接口实现的子类为双列结合(K_V )</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/Whzxbx.png" alt="Whzxbx" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/vkXtxV.png" alt="vkXtxV" loading="lazy"></figure>
<h3 id="1301-collection接口">13.01 Collection接口</h3>
<ul>
<li>
<p>常用方法</p>
<ul>
<li>add/addAll</li>
<li>remove/clear/removeAll</li>
<li>contains/containsAll</li>
<li>size</li>
<li>isEmpty</li>
</ul>
</li>
<li>
<p>遍历:</p>
<ul>
<li>
<p>迭代器——&gt;Iterator对象; 所有实现Collection接口均实现</p>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/2021-05-13 15.42.43.gif" alt="2021-05-1315.42.43" style="zoom:150%;" />
</li>
</ul>
</li>
</ul>
<h3 id="1302-list接口">13.02 List接口</h3>
<p><code>List特点:</code></p>
<ul>
<li>元素有序(添加和取出顺序 ) 可重复</li>
<li>支持索引 从0开始</li>
</ul>
<p>实现List接口有: <code>ArrayList LinkedList Vector Stack etc.</code></p>
<p><code>List接口常用方法:</code> 常见8种</p>
<pre><code class="language-java">// index位置插ele List长度自动+1
void add(int index, Object ele);
//index位置开始将eles中所有元素加入
boolean addAll(int index, Collection eles);
// 获取index位置元素
Object get(int index);
// 返回object在集合中首次出现位置
int indexOf(Object obj);
// 返回obj在集合中末次出现位置
int lastIndexOf(Object obj);
// 移除index位置元素并返回该元素
Object remove(int index);
// 替换index位置元素为ele——&gt;也可用于交换

Object set(int index, Object ele);
// 返回从fromIndex到toIndex位置的子集合 前闭后开[forIndex,toIndex)
List subList(int formIndex, int toIndex);

</code></pre>
<p><code>set</code>可用于交换 注意先后访问的顺序</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/KGeM3K.png" alt="KGeM3K" loading="lazy"></figure>
<p><code>List常见遍历方式:</code></p>
<pre><code class="language-java">// 迭代器遍历
Iterator ite = collection.iterator();
while(ite.hasNext()) {
    Object next - ite.next();
}

// foreach遍历
for(Object o : Collection) {
    
}

// 普通fori
        for (int i = 0; i &lt; Collection.size(); i++) {
            Object o = Collection.get(i);
        }
</code></pre>
<h4 id="arraylist注意事项️">ArrayList注意事项⚠️</h4>
<ul>
<li>
<p>可以加入多个null</p>
</li>
<li>
<p>是由数组底层实现</p>
</li>
<li>
<p>线程不安全——&gt;没有<code>synchronized</code> 可以等同于Vector (线程安全)</p>
</li>
</ul>
<p><em>底层源码阅读</em>  注意IDEA默认debug不显示null的扩容内容</p>
<ul>
<li>
<p>维护<code>Object</code>类型数组 <code>elecmentData</code></p>
<ul>
<li><code>transient object[] elementData</code> 表示为瞬时 该属性不会被序列化</li>
</ul>
</li>
<li>
<p>创建<code>ArrayList</code>对象时:</p>
<ul>
<li>无参构造器——&gt;初始化的elementData容量为0, 第一次添加扩容elementData为10, 再次扩容则为1.5倍(0_10_15_22)</li>
<li>ArrayList(int) 指定大小的构造器——&gt;elementData容量为制定大小,扩容则直接扩为1.5倍</li>
</ul>
<p><strong>扩容:</strong></p>
<pre><code class="language-java">// 右移一位 ——&gt; /2int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);// 使用Arrays.copyOf(nums,length)来对底层数组elementData扩容return elementData = Arrays.copyOf(elementData, newCapacity);// Arrays.copyOf()超出nums的len范围用null来填充
</code></pre>
<p><code>无参构造器:</code><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/HXRDVH.png" alt="HXRDVH" loading="lazy"></p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/tIEh4x.png" alt="tIEh4x" style="zoom: 50%;" />
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/kBrKAj.png" alt="kBrKAj" style="zoom:150%;" />
<p><code>ArraysSupport.newLength</code>方法用于获取newCapacity</p>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/Mh3IOH.png" alt="Mh3IOH" style="zoom:50%;" />
<h4 id="vector底层结构源码剖析"><code>Vector</code>底层结构&amp;源码剖析</h4>
<ul>
<li>
<p>底层同样是对象数组 <code>protected Object[] elementData</code></p>
</li>
<li>
<p>线程同步安全 操作方法带有<code>synchronized</code></p>
<p><strong>无参构造:</strong> 默认10initalCapacity 再按照2倍扩容</p>
<p><strong>指定大小:</strong> 每次2倍扩容</p>
</li>
</ul>
<h4 id="linkedlist源码和结构"><code>LinkedList</code>源码和结构</h4>
<img src="/Users/qlzhou/Library/Application Support/typora-user-images/image-20210514171051143.png" alt="image-20210514171051143" style="zoom:50%;" />
<ul>
<li>底层双向链表、队列——&gt;插入、删除效率高
<ul>
<li>维护两个属性first last 分别指向首尾结点</li>
<li>每个节点Node维护prev next item三个属性</li>
<li>双向链表的插入——&gt; waitInsert.next=prevNode; waitInsert.pre=nextNode; prevNode.next=waitInsert; nextNode.pre=waitInsert;</li>
</ul>
</li>
<li>元素任意(可以重复)  包括null</li>
<li>线程不安全 没有实现同步</li>
</ul>
<p><strong><code>LinkedListCRUD</code></strong></p>
<p>​	linkedList.add(item)——&gt;使用linkLast(e)函数(将添加的节点挂入原链表的最后)</p>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/NJEbDZ.png" alt="NJEbDZ" style="zoom:50%;" />
<p><em><code>Explain To linkLast(E e)</code></em></p>
<p>初始last=null——&gt;第一个节点时 first last newNode均指向节点newNode——&gt;再插入则 l=last last=newNode 将newNode的prev指向l 即原先的last(上一个节点位置) 同时将last指向newNode 设为双向链表的尾指针——&gt;l!=null 再将上一个节点的next指针指向newNode 同时更新size/modCount 完成两个节点之间的链接</p>
<p>linkedList.remove(int index)——&gt;首先使用node(index)函数找到index下标的结点并返回该节点——&gt;调用unlink(Node<E> x) 函数删除该节点并返回item值</p>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/C2JGW8.png" alt="C2JGW8" style="zoom:50%;" />
<p><em><code>Explain To node(index)</code></em></p>
<p>判断下标index在整个链表的前部还是后部——&gt;⚠️后部<code>i=size-1;i&gt;index;i--</code> 判断</p>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/DdBI3S.png" alt="DdBI3S" style="zoom:50%;" />
<p>​	<em><code>Explain To unlink(Node&lt;E&gt; x)</code></em></p>
<p>暂存待删结点x的前后结点</p>
<p>prev next——&gt;移动x的前一结点的next指向x的下一结点<code>prev.next=next</code>   移动x的下一结点的prev指向x的上一结点<code>next.prev=prev</code> ——&gt;同时将x的prev和next均置空(help GC) ——&gt;最后item置空并链表size-1</p>
<h5 id="arraylist-linkedlist-compare">ArrayList &amp;&amp; LinkedList Compare</h5>
<p>ArrayList——&gt;增查</p>
<p>LinkedList——删改</p>
<p>均为线程不安全</p>
<h3 id="1303-set">13.03 <code>Set</code></h3>
<p><code>Feature:</code></p>
<ul>
<li>无序（添加与取出的顺序不一致） 没有 index 索引
<ul>
<li>取出的顺序一次设定即被固定</li>
</ul>
</li>
<li>无重复元素——&gt;最多包含一个 null 多个重复数字后者不会被添加</li>
<li><code>set</code>接口实现的类：<code>HashSet、TreeSet、LinkedHashSet、etc.</code></li>
</ul>
<p><code>Mathods:</code></p>
<ul>
<li>是 Collection 的子接口——&gt;常用方法一致</li>
<li>遍历：迭代器 foeeach 不可 index 索引</li>
</ul>
<h4 id="hashset"><code>HashSet</code></h4>
<p><code>instructions:</code></p>
<ul>
<li>
<p>实现 Set 接口</p>
</li>
<li>
<p>本质上是<code>HashMap</code> <img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/DBF5F0.png" alt="DBF5F0" style="zoom:50%;" />——<code>HashMap</code>底层是数组+链表+红黑树</p>
<ul>
<li>在数组的某个index 位置存储链表（数据存储的高效）</li>
<li>index 上存储的链表长度&gt;8（TreeIfy_Threshold）并且数组长度&gt;64(Min_TreeIfy_Capacity) ————&gt;转化为树</li>
</ul>
</li>
<li>
<p>可存放 null 但仅可有一个 元素不可重复</p>
<ul>
<li>注意元素重复与否与 JVM 内存相关——&gt;常量池、栈内存</li>
<li>toString 没有重写则输出为引用的地址 重写则为内容</li>
<li>new String(“**”)——&gt;先在常量池中查找有没有已经存在的 str</li>
</ul>
</li>
<li>
<p>不保证元素有序，取决于 Hash 后在确定索引</p>
</li>
</ul>
<h5 id="hashset-add-method"><code>HashSet add Method</code></h5>
<ul>
<li>添加元素时——&gt;得到元素的 hash 值再转化——&gt;索引值(存储位置)</li>
<li>存储数据表 tables——&gt;是否已经存放（没有直接加入、有则下步比较 ）</li>
<li>有调用 equal 比较——&gt;不相同再加入到最后</li>
</ul>
<p>hash 值计算<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/2b37hf.png" alt="2b37hf" style="zoom:50%;" /></p>
<p>第一次 add</p>
<p>依据 hash 计算出的 key 应该存档于 table 的位置，并赋值给辅助变量 p(p 指向索引的结点)</p>
<p>再判断 p 是否为空——&gt;空（对应的插入位置无元素）则将 key新建 Node 并存入 tab[i] （hash key value=present next）——&gt;判断 size 与 threshold(0.75*16)  扩容与否  再返回 null 则表示插入成功</p>
<p>add 所插入的位置非空——&gt;</p>
<p><code>p.hash==hash &amp;&amp; ((k=p.key)==key)||(key!=null&amp;&amp;key.equals(k))</code> hash value equals 三重比较确保两者不相同</p>
<p>返回 oldValue 非空则插入式失败</p>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/Jzejjh.png" alt="Jzejjh" style="zoom:150%;" />
<h5 id="hashset-扩容机制"><code>HashSet 扩容机制</code></h5>
<ol>
<li>
<p>底层<code>HashMap</code> 第一次添加时 <code>table 数组</code>扩容到 16，阈值<code>threshold</code>为 16*0.75加载因子（<code>loadFactor</code>）=12</p>
</li>
<li>
<p><code>table 数组</code>扩容为* 2=32 新的临界值(<code>threshold</code>)为 0.75*32=24</p>
<p>扩容是使用左移&lt;&lt;1实现 * 2</p>
</li>
<li>
<p>链表元素个数达到<code>TreeIfy_Threshold(8)</code>且 table 数组大小&gt;=<code>Min_Treeify_Capacity</code> 则转化为红黑树，否则仍然是扩容数组</p>
</li>
</ol>
<p>​	使用重写 class 的 hashcode 方法 返回同一个 hashcode 使得插入在 map 的同一个数组 index 上的链表内 链表长度超过 8 后会使  table 扩容 &lt;&lt;1 表长+1  扩容为 32表长再+1 到 10  再扩容 64  若在添加元素则树化  treeifyBin 方法</p>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/29NvGo.png" alt="29NvGo" style="zoom:50%;" />
<p>​	直到走到链表末尾进行且 binCount&gt;=8-1=7(从 0 开始)则调用<code>treeifyBin</code>方法树化 传入 table 和 hash 参数</p>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/B2ojcy.png" alt="B2ojcy" style="zoom:50%;" />
<p><code>Min_TreeIfy_Capacity=64</code></p>
<p><code>tab[index=(n-1)&amp;hash]</code> 找到数组储存数据的位置并将e 指向这个引用</p>
<h4 id="linkedhashset"><code>LinkedHashSet</code></h4>
<blockquote>
<p><code>Features:</code></p>
<ol>
<li>属于 HashSet 的子类；</li>
<li>底层是<code>LinkedHashMap</code>，维护了数组+双向链表；</li>
<li>依据元素的<code>hashcode</code>决定元素的存储位置，同时用链表维护元素的次序（图），使得元素看起来插入顺序保存；</li>
<li>不允许重复元素；</li>
</ol>
</blockquote>
<p><code>Explain</code></p>
<blockquote>
<ol>
<li>维护 hash 表和双向链表（属性有 head 和 tail） 使得每次后续插入的元素连接在最后 有序</li>
<li>每个节点有 prev 和 next 属性 before after</li>
<li>添加元素时，先求 hash值再求索引，从而确定元素在 hashtable 的位置——&gt;再添加进入双向链表</li>
<li>遍历顺序保证与插入顺序一致</li>
</ol>
</blockquote>
<ul>
<li>
<p>底层维护<code>LinkedeHashMap</code>结构 ——&gt;是 <code>HashMap</code> 的子类</p>
</li>
<li>
<p>首次初始化为 16（size）结点类型为<code>LinkedHashMao$Entry</code>——&gt;数组是<code>HashMap$Node[]</code> 存放的元素是<code>LinkedHashMap$Entry</code>  即为多态 继承父类的属性</p>
<figure data-type="image" tabindex="5"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/W58GVZ.png" alt="W58GVZ" loading="lazy"></figure>
</li>
</ul>
<p>要求 hashcode 和 equal 均相同才无法加入，对于非基本数据类型需要重写两个方法 equal 和 hashcode</p>
<h4 id="treeset">TreeSet</h4>
<p>可以排序</p>
<p>使用无参构造器创建<code>TreeSet</code>  无序</p>
<p>有参可以使用<code>Comparator</code> 接口——&gt;传入比较器 匿名内部类</p>
<p>构造器将传入的比较器对象comparator赋给 TreeSet 底层的 TreeMap 的属性 comparator</p>
<pre><code class="language-java">public TreeMap(Comparator&lt;? super K&gt; comparator) {
    this.comparator = comparator;
}


final int compare(Object k1, Object k2) {
    return comparator==null ? ((Comparable&lt;? super K&gt;)k1).compareTo((K)k2)
        : comparator.compare((K)k1, (K)k2);
}
</code></pre>
<p>在 TreeSet 的 add 方法会调用</p>
<pre><code class="language-java">private V put(K key, V value, boolean replaceOld) {
    Entry&lt;K,V&gt; t = root;
    if (t == null) {
        addEntryToEmptyMap(key, value);
        return null;
    }
    int cmp;
    Entry&lt;K,V&gt; parent;
    // split comparator and comparable paths
    Comparator&lt;? super K&gt; cpr = comparator;
    if (cpr != null) {
        do {
            parent = t;
           	// 调用自定的 compare
            cmp = cpr.compare(key, t.key);
            if (cmp &lt; 0)
                t = t.left;
            else if (cmp &gt; 0)
                t = t.right;
            else {
                // 两个值相等时候即返回 oldVaule 无法添加
                V oldValue = t.value;
                if (replaceOld || oldValue == null) {
                    t.value = value;
                }
                return oldValue;
            }
        } while (t != null);
    } else {
        Objects.requireNonNull(key);
        @SuppressWarnings(&quot;unchecked&quot;)
        Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key;
        do {
            // 这里的循环逐个比较则一旦出现相应的就 return了 
            // 即==时候无法被加入（==为自定的规则）
            parent = t;
            cmp = k.compareTo(t.key);
            if (cmp &lt; 0)
                t = t.left;
            else if (cmp &gt; 0)
                t = t.right;
            else {
                V oldValue = t.value;
                if (replaceOld || oldValue == null) {
                    t.value = value;
                }
                return oldValue;
            }
        } while (t != null);
    }
    addEntry(key, value, parent, cmp &lt; 0);
    return null;
}
</code></pre>
<h3 id="1304-map">13.04 Map</h3>
<p>该接口子类具有的特点：</p>
<blockquote>
<p>Features:</p>
<ol>
<li>Map 和 collection 并列，用于保存具有映射关系的 Key-value 之间为单项一对一的关系</li>
<li>Key Value 可以是任何引用类型的数据 object，会被封装到 HashMap$Node 内部类，Node 实现Entry 接口，即一对 K-V 就是一个 Entry</li>
<li>使用 EntrySet 内部类，定义的类型是 Entry 实际上存放是 HashMap$Node 因为 Node implement Map.Entry 接口——&gt;接口的多态</li>
<li>EntrySet 方便遍历——&gt;提供了 getKey getValue 方法</li>
<li>Key 可为 null 仅一个但不可重复（），value 可以重复并可为 null</li>
</ol>
</blockquote>
<p>Node——&gt;Entry——&gt;EntrySet</p>
<p>Properties：</p>
<p>​	继承自HashTable 并且适用于 Properties文件类型导入加载数据到 Properities 类对象读取和修改</p>
<p>​	读取配置文件时候常用</p>
<h4 id="集合选择">集合选择</h4>
<ul>
<li>存储类型</li>
<li>单列对象：<code>Collection</code> 接口
<ul>
<li>允许重复：List
<ul>
<li>增删：LinkedList——&gt;底层双向链表</li>
<li>改查：ArrayList——&gt;底层维护 Object 可变数组</li>
</ul>
</li>
<li>不允许重复：Set
<ul>
<li>无序：HashSet——&gt;底层 HashMap 维护哈希表（数组+链表+红黑树）</li>
<li>排序：TreeSet</li>
<li>插入和取出循序一致：LinkedHashSet——&gt;数组+双向链表</li>
</ul>
</li>
</ul>
</li>
<li>双列键值对：Map
<ul>
<li>键无序：HashMap——&gt;哈希表</li>
<li>键排序：TreeMap</li>
<li>键插入和取出顺序一致：LinkedHashMap</li>
<li>读取配置文件：Properties</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac配置指南]]></title>
        <id>https://flyingchase.github.io/post/mac-pei-zhi-zhi-nan/</id>
        <link href="https://flyingchase.github.io/post/mac-pei-zhi-zhi-nan/">
        </link>
        <updated>2021-05-03T12:26:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>升级Big sur时替换硬盘使用Time Machine只恢复一月前备份,故将配置流程记录</p>
<p>教训:</p>
<ul>
<li>做好多处备份, 机械和固态多个备份, 在升级和较多本地内容变动时加强备份频率;</li>
<li>少折腾多干活, 黑苹果不要追求太完美, 现有的版本能稳定运行即可, 多刷题多学习, 不要花时间过于折腾;</li>
</ul>
<h2 id="系统设置">系统设置</h2>
<h4 id="触控板">触控板</h4>
<p>Bettertouch</p>
<h2 id="开发工具">开发工具</h2>
<h4 id="idea系列">IDEA系列</h4>
<h5 id="自动补全">自动补全</h5>
<p><strong>快速输出</strong></p>
<p>List.sout——&gt;System.out.println(list);</p>
<p><strong>定义局部变量</strong></p>
<p>new ArrayList&lt;&gt;().var;</p>
<p><strong>判断空与否</strong></p>
<p>List.null——&gt;if(List==null)</p>
<p>List.notnull——&gt;if(List!=null)</p>
<p><strong>快速取反:</strong></p>
<p>​	输入 .not 可以让布尔值快速取反，再输入 .if 可快速生成 if 判断语句块。</p>
<p>![2021-05-1311.47.57](https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/2021-05-13 11.47.57.gif)</p>
<p><strong>快速遍历集合:</strong></p>
<p>collection.for/.forr/.fori</p>
<p>![2021-05-1311.51.59](https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/2021-05-13 11.51.59.gif)</p>
<p><strong>快速返回:</strong></p>
<p>Object.return——&gt;return Object;</p>
<h5 id="重构生成">重构/生成</h5>
<p>快速生成类的构造器和get set等常见方法</p>
<p>重写toString/hashCode/equal等常见方法</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/ry6AzG.png" alt="ry6AzG" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux操作命令笔记]]></title>
        <id>https://flyingchase.github.io/post/linux-cao-zuo-ming-ling-bi-ji/</id>
        <link href="https://flyingchase.github.io/post/linux-cao-zuo-ming-ling-bi-ji/">
        </link>
        <updated>2021-05-03T12:25:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="to-do-list"><strong>TO DO LIST</strong></h1>
<ul>
<li>top命令</li>
<li>ps命令</li>
<li>netstat命令</li>
<li>awk命令</li>
<li>find命令</li>
<li>grep命令</li>
<li>wc命令</li>
<li>sed命令</li>
<li>head和tail命令</li>
<li>正则表达式</li>
<li>如何查找出现频率最高的100个IP地址</li>
<li>linux如何统计文件中某个字符串出现的频率</li>
<li>linux启动的第一个进程</li>
<li>linux查看端口占用</li>
<li>linux查看CPU和内存使用</li>
<li>Linux查看系统负载命令</li>
<li>Linux调试程序</li>
<li>Linux硬链接和软连接</li>
<li>core dump</li>
<li>cmake和makefile</li>
<li>Shell脚本基本语法和使用</li>
</ul>
<h1 id="linux网络编程">Linux网络编程</h1>
<ul>
<li>孤儿进程、僵尸进程和守护进程</li>
<li>进程间通信方式signal、file、pipe、shm、sem、msg、socket</li>
<li>线程同步机制线程：互斥量、锁机制、条件变量、信号量、读写锁</li>
<li>fork返回值</li>
<li>五大IO模型：阻塞I/O、非阻塞I/O、I/O复用、信号驱动I/O、异步I/O</li>
<li>IO复用机制</li>
<li>epoll与select/poll</li>
<li>LT水平触发和ET边缘触发</li>
<li>Reactor和Proactor模式</li>
<li>反向代理、负载均衡</li>
</ul>
<h1 id="linux操作指令-笔记">Linux操作指令-笔记</h1>
<h2 id="1-文件权限">1 文件权限</h2>
<h3 id="11-ls命令">1.1 ls命令</h3>
<p>帮助 <code>man ls</code> <code>info ls</code></p>
<p><code>ls -al</code> ——&gt;list all include those hided</p>
<p>e.g:</p>
<p><code>-rwxr-xr-x 1 qlzhou staff 5797544 12 21 15:59 impl</code></p>
<p>第一列10个字符 文件类型和权限</p>
<p>​	1 - 代表文件 d代表文件夹</p>
<p>​	234拥有者权限 rwx 可读可写可执行</p>
<p>​	567 同用户组权限 r-x 可读可执行</p>
<p>​	8910 其他用户权限 r-x 可读可执行</p>
<pre><code>其中r w x顺序不变 不存在该权限则为- 
</code></pre>
<p>第二列 1代表多少文件名连接到此节点i-node</p>
<p>第三列 qlzhou代表所有者账号</p>
<p>第四列 表示文件所属用户组</p>
<p>第五列 文件大小 默认单位B</p>
<p>第六列 修改日期</p>
<p>​	完整时间显示 <code>ls -l --full-time</code></p>
<p>第七列 文件名 隐藏文件前含.</p>
<h3 id="12-文件权限修改">1.2 文件权限修改</h3>
<p>使用cp复制时会保留原有的用户权限 从而他人无法修改</p>
<ul>
<li>
<p>chgrp修改所属用户组</p>
<p>change group简写</p>
<p>-R递归 recursive 持续修改 包括子目录下文件 目录</p>
</li>
<li>
<p>Chown修改文件所有者</p>
<p><code>chown username filename/dirname</code> 可加-R</p>
</li>
<li>
<p>Chmod</p>
</li>
</ul>
<h2 id="man-获得帮助"><strong>man - 获得帮助</strong></h2>
<pre><code class="language-text">man ls        # 许多Linux自带命令可以通过man查看使用帮助
ls --help     # 有些程序可以通过-h, --help查看使用帮助
</code></pre>
<h2 id="ls-显示目录内容"><strong>ls - 显示目录内容</strong></h2>
<pre><code class="language-bash">ls                      # 显示目录内容
ls -l                   # 以列表显示形式显示目录内容，通常在~/.bashrc文件中增加一行：alias ll='ls -l'
                        # 以后就可以直接使用别名ll了，更方便
ll -h                   # 以人类可读的方式显示文件大小
ll -t                   # 以文件的修改时间排序，最新修改的在最前面
ll -tr                  # 以文件的修改时间排序，最新修改的在最后面
watch -n 3 -dc ls -l    # 追踪目录内容的变化，每3秒刷新一次
</code></pre>
<h2 id="pwd-显示当前目录"><strong>pwd - 显示当前目录</strong></h2>
<pre><code class="language-bash">pwd                 # 显示当前目录的绝对路径
ls `pwd`/file       # 显示文件的绝对路径
</code></pre>
<h2 id="cd-切换目录"><strong>cd - 切换目录</strong></h2>
<pre><code class="language-bash">cd dir    # 切换到目录dir
cd        # 切换到用户的HOME目录
cd ~      # 同cd，~表示HOME目录
cd ..     # 切换到上一级目录；一个点.表示当前目录，两个点..表示上一级目录
cd -      # 切换到进入当前目录之前所在的目录
</code></pre>
<h2 id="mkdir-创建目录"><strong>mkdir - 创建目录</strong></h2>
<pre><code class="language-bash">mkdir dir           # 创建dir目录
mkdir -p dir1/dir2  # 递归创建目录，如dir1不存在，会先创建dir1
</code></pre>
<h2 id="cat-合并文件按行"><strong>cat - 合并文件（按行）</strong></h2>
<pre><code class="language-bash">cat file              # 合并一个或多个文件至标准输出，当只有一个文件时，相当于显示所有文件内容
cat file1 file2       # 合并file1和file2的内容，并在屏幕上输出
cat R1.fq.gz R2.fq.gz # 可以合并gzip压缩文件，如测序数据原始reads的合并
</code></pre>
<h2 id="paste-合并文件按列"><strong>paste - 合并文件（按列）</strong></h2>
<pre><code class="language-bash">paste -d ' ' file1 file2    # 按列对列的方式一行一行合并文件。默认列中间加TAB键， -d参数可以改变列之间的分隔符
</code></pre>
<h2 id="split-分割文件"><strong>split - 分割文件</strong></h2>
<pre><code class="language-bash">split -d -l 10000 file chunk_   # 按行数分割文件，每个文件最多10000行，分割成的文件名为chunk_01, chunk_02。。。
split -d -b 100m file chunk_    # 按大小分割文件，每个文件最多100m，分割成的文件名为chunk_01, chunk_02。。。
</code></pre>
<h2 id="cut-剪切文件"><strong>cut - 剪切文件</strong></h2>
<pre><code class="language-bash">cut -f 1 file                   # 剪切文件的第1列
cut -f 1,2                      # 剪切文件的第1，2列
cut -f 3-                       # 剪切第3列及之后的所有列
cut -d ' ' -f 1 file            # 剪切第1列，但以空格作为列与列之间的分隔符。默认以TAB作为分隔符
grep '^&gt;' test.fa | cut -c 2-   # 得到fasta文件中的序列名称（去掉了&gt;符号）
</code></pre>
<h2 id="less-head-tail-显示文件内容"><strong>less, head, tail - 显示文件内容</strong></h2>
<pre><code class="language-bash">less file       # 分屏显示文件内容，按空格键显示下一页，按下/后可以搜索内容
less -SN file   # 显示文件的行号，并且截断太长的行 

head file       # 默认显示文件前10行
head -n 20 file # 显示文件前20行

tail file       # 默认显示文件后10行
tail -n 20 file # 显示文件后20行
tail -n +2 file # 跳过第1行，显示从第2行开始的所有行，可用于跳过文件的标题行
tail -f file    # 当文件的内容还在增加时，实时显示末尾增加的内容，常用于查看日志文件的更新情况
</code></pre>
<h2 id="wc-统计文件内容"><strong>wc - 统计文件内容</strong></h2>
<pre><code class="language-bash">wc -l file      # 统计文件行数
</code></pre>
<h2 id="touch-创建文件"><strong>touch - 创建文件</strong></h2>
<pre><code class="language-bash">touch file                  # 创建一个空文件
touch {file1,file2,file3}   # 同时创建3个文件
</code></pre>
<h2 id="cp-mv-rm-文件目录的复制移动删除"><strong>cp, mv, rm- 文件/目录的复制，移动，删除</strong></h2>
<pre><code class="language-bash">scp file1 file2     # 将file1复制一份，命名为file2，复制目录要加-r参数：scp -r
mv file1 dir1/      # 将file1移动到dir1/目录下
mv file1 file2      # 重命名：即将file1移动成为file2
rm file             # 删除文件，删除目录要加-r参数：rm -r
rm -f file          # 文件若不存在，删除时会报错，加-f参数就不会报错
</code></pre>
<h2 id="tar-文件打包压缩"><strong>tar - 文件打包/压缩</strong></h2>
<pre><code class="language-bash"># 平时tar基本上就能完成打包、压缩、解压的任务了
tar czvf file.tar.gz files  # 打包并压缩
tar xvf file.tar.gz         # 解包，解压缩

gzip file                   # 压缩
gunzip file.gz              # 解压
</code></pre>
<h2 id="chmod-改变文件目录权限"><strong>chmod - 改变文件/目录权限</strong></h2>
<pre><code class="language-bash">chmod +x file   # 增加[本人]可执行权限
chmod -x file   # 取消[本人]可执行权限
chmod a+x file  # 增加[所有人]可执行权限
chmod a-x file  # 取消[所有人]可执行权限
</code></pre>
<h2 id="chown-改变文件目录归属"><strong>chown - 改变文件/目录归属</strong></h2>
<pre><code class="language-bash">chown jianzuoyi:jianzuoyi file      # 将文件的所有权给jianzuoyi
chown -R jianzuoyi:jianzuoyi dirname    # 将目录以及目录内的文件的所有权给jianzuoyi
</code></pre>
<h2 id="sort-uniq-排序去重"><strong>sort, uniq - 排序，去重</strong></h2>
<pre><code class="language-bash">sort file				# 默认按字典序对文件进行排序
sort -k2,2 -k3,3 file	# 先按第2列排序，第2列相同，再按第3列排序
sort -k2,2n file		# 按第2列排序，且第2列是数字，升序
sort -k2,2nr file		# 按第2列排序，且第2列是数字，降序
sort -u file			# 先排序文件，然后去除相邻的重复行，只保留一条记录
sort file | uniq		# 去除相信的重复行，只保留一条记录，相当于： sort -u file

# 利用sort, uniq取两个文件的交、并、补集
sort a b | uniq			# 并集
sort a b | uniq -d &gt; c	# 交集
sort a c | uniq -u 		# 补集
</code></pre>
<h2 id="wget-下载文件"><strong>wget - 下载文件</strong></h2>
<pre><code class="language-bash">wget https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh	# 下载文件到当前目录，文件名保持不变
</code></pre>
<h2 id="ssh-远程登录"><strong>ssh - 远程登录</strong></h2>
<pre><code class="language-bash">ssh username@host					 # ssh 远程连接至服务器
</code></pre>
<h2 id="scp-远程文件传输"><strong>scp - 远程文件传输</strong></h2>
<pre><code class="language-bash">scp username@host:/path/to/file .	 # 将远程服务器上的文件传输到当前目录，文件名保持不变，复制目录加参数-r
scp file username@host:/path/to/dir/ # 将本地文件复制到远程服务器，文件名保持不变，复制目录加参数-r
</code></pre>
<h2 id="rsync-远程文件拷贝"><strong>rsync - 远程文件拷贝</strong></h2>
<p>rsync与scp不同，它只是做增量更新且支持断点续传，也就是要复制的文件存在于目标文件夹且内容与当前要复制的相同，则不会复制。</p>
<pre><code class="language-bash">rsync -azvP dir1 dir2					# 将dir1的内容同步至dir2
rsync -azvP --delete dir1 dir2			# 同步dir2与dir1，dir1中删除的文件，dir2中也要跟着删除
rsync -azvP --exclude 'file' dir1 dir2  # 同步dir2与dir2，且将file排除在外
</code></pre>
<h2 id="df-du-free-查看磁盘内存使用情况"><strong>df, du, free - 查看磁盘/内存使用情况</strong></h2>
<pre><code class="language-bash">df -h		# 查看磁盘使用情况，-h表示以人类可读的方式显示容量大小
du -sh		# 查看当前目录使用了多少磁盘空间
du -sh *	# 查看当前目录下各文件或文件夹使用的磁盘空间
free -h		# 查看内存使用情况
</code></pre>
<h2 id="top-htop-ps-kill-任务管理"><strong>top, htop, ps, kill - 任务管理</strong></h2>
<pre><code class="language-bash">top -c		# 查看CPU，内存的使用情况
htop		# top的完美替代品，Linux系统不自带，需要安装， ubuntu系统：apt install htop
ps aut		# 查看后台任务运行情况，第2列是任务的PID号
kill -9 PID # 删除编号为PID的任务
</code></pre>
<h2 id="nohupdisown-远程任务管理"><strong>nohup，disown - 远程任务管理</strong></h2>
<pre><code class="language-bash">nohup ./run.sh &amp;&gt; run.sh.o &amp;	# 远程SSH登录服务器，在后台运行任务，断开远程连接后任务仍然在后台跑
</code></pre>
<ul>
<li>如果运行任务时没有加nohup命令，但任务运行时间长，但又必须断开（比如快下班了），若不想让任务因为断开远程连接而中断，可以用disown命令补救</li>
</ul>
<pre><code class="language-bash">./run.sh	# 假如任务是直接这样开始跑的
ctrl + z	# 按ctrl + z，将任务放到后台
jobs		# 输入jobs命令，回车，可以看到任务是暂停的： [1]+  Stopped(SIGTSTP)        bash run.sh
bg			# 让后台暂停的任务开始运行
jobs		# 再次运行jobs，可以看到任务已经跑起来了：   [1]+  Running                 bash run.sh &amp;
disown -r 	# 从当前shell中移除运行中的作业，至此，可以关掉终端回家了
</code></pre>
<h2 id="-管道"><strong>| - 管道</strong></h2>
<p>管道，将前一个命令的输出作为后一个命令的输入</p>
<pre><code class="language-bash">command1 | command2
</code></pre>
<h2 id="-输入输出重定向"><strong>&gt;, &gt;&gt; - 输入输出重定向</strong></h2>
<p>Linux中常用重定向操作符有：</p>
<ol>
<li>标准输入（/dev/stdin）：代码为0， 使用&lt;或&lt;&lt;</li>
<li>标准输出（/dev/stdout）：代码为1，使用&gt;（覆盖）或&gt;&gt;（追加）</li>
<li>标准错误输出（/dev/stderr）：代码为2，使用2&gt;或2&gt;&gt;</li>
<li>&amp;&gt; 标准输出和错误输出同时重定向</li>
<li>/dev/null 代表垃圾箱，不想要保存的东西都可以重定向到这里</li>
</ol>
<ul>
<li>输出重定向就是将命令的结果重定向到文件，而不是输出到屏幕，通常用于保存命令的结果</li>
</ul>
<pre><code class="language-bash">./run.sh &gt; run.sh.o		# 标准输出到run.sh.o日志文件
./run.sh 2&gt; run.sh.e	# 标准错误输出到run.sh.e错误日志文件
./run.sh &amp;&gt; run.sh.log	# 标准输出和标准错误都输出到定一个文件
./run.sh &amp;&gt; /dev/null	# 丢弃标准输出和标准错误信息
</code></pre>
<ul>
<li>输入重定向是将文件作为输入的来源，而不是键盘</li>
</ul>
<pre><code class="language-bash">command &lt; file			# 将file的内容作为command的输入 
command &lt;&lt; END			# 从标准输入（键盘）中读取数据，直到遇到分界符END时停止（分界符用户可以自定义）
command &lt;file1 &gt; file2	# 将file1作为command的输入，并将处理结果输出到file2
</code></pre>
<ul>
<li>综合运用</li>
</ul>
<pre><code class="language-bash">#!/bin/bash

while read line
do
    do something
done &lt; file.txt &gt; result.txt
</code></pre>
<p>逐行读入file.txt的内容，处理之后，将结果保存到result.txt文件中。</p>
<h2 id="find-locate-which-文件查找"><strong>find, locate, which - 文件查找</strong></h2>
<pre><code class="language-bash">find -name file					# 在当前目录查找名为file的文件
find dir/ -name file			# 在dir/目录下查找名为file的文件
find dir/ -name '*file*'		# 在dir/目录下查找包含file关键词的文件，-name参数支持正则表达式
find dir/ -name file -delete	# 查找文件并删除

locate file						# 查找文件
which command					# 显示命令的绝对路径
</code></pre>
<h2 id="xargs-命令组合工具"><strong>xargs - 命令组合工具</strong></h2>
<pre><code class="language-bash">cat file | xargs		# 将file的内容显示成一行
cat file | xargs -n3	# 将file的内容每3列一行进行输出
find /ifs/result -name '*.fq.gz' | xargs -n1 -I{} cp {} /ifs/data/	# 查找fq.gz文件并复制到/ifs/data目录下
find /ifs/result -name '*.fq.gz' | xargs tar czvf all.fq.gz			# 查找fq.gz文件并打包在一起
find . -type f -name '*.log' -print0 | xargs -0 rm -f				# 当rm文件过多时，可以这样删除
find . -type f -name '*.py' -print0 | xargs -0 wc -l				# 统计一个目录中所有python文件的行数
</code></pre>
<h2 id="parallel-并行工具"><strong>parallel - 并行工具</strong></h2>
<p>parallel是增强版的xargs。假如一个脚本文件中有4条命令：</p>
<pre><code class="language-bash"># cat run.sh
echo a
echo b
echo c
echo d

# 同时执行4个任务，生信中常通过这种方式并行执行多个任务
cat run.sh | parallel -j 4	
find *.fq | parallel -j 12 &quot;fastqc {} --outdir .&quot;	# 同时执行12个Fastqc任务
find *.bam | parallel --dry-run 'samtools index {}' # 同时执行samtools index任务，--dry-run显示任务命令但不实际执行，用于命令检查
</code></pre>
<h2 id="useradd-添加用户"><strong>useradd - 添加用户</strong></h2>
<pre><code class="language-bash">useradd -m username	# 创建用户并为其在/home下创建一个以其名称命名的目录
</code></pre>
<h2 id="passwd-更改密码"><strong>passwd - 更改密码</strong></h2>
<pre><code class="language-bash">passwd	    	   # 更改当前用户的密码
passwd username	   # 更改指定用户的密码
</code></pre>
<h2 id="dos2unix-文件格式转换"><strong>dos2unix - 文件格式转换</strong></h2>
<p>Linux很多工具都是针对纯文本文件的，并且需要是Unix-like格式的文本文件。但是很多时候文件是从Windows或Mac系统上传到Linux服务器上的，这可能导致文件格式不兼容，原因是不同平台生成的文本文件的换行符不一样。</p>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>符号</th>
<th>正则表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mac</td>
<td>^M</td>
<td>\r</td>
</tr>
<tr>
<td>Linux</td>
<td>$</td>
<td>\n</td>
</tr>
<tr>
<td>Windows</td>
<td>^M$</td>
<td>\r\n</td>
</tr>
</tbody>
</table>
<pre><code class="language-bash">cat -A file			# 查看文件换行符情况
dos2unix file			# Windows格式转换成Unix-like格式
</code></pre>
<h2 id="grep"><strong>grep</strong></h2>
<p><strong>用于查找文件里符合条件的字符串。</strong></p>
<pre><code class="language-bash">grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][--help][范本样式][文件或目录...]
grep pattern files			 # 搜索文件中包含pattern的行
grep -v pattern files		 # 搜索文件中不包含pattern的行

grep -f pattern.txt files	 # 搜索的pattern来自于文件中
grep -i pattern files		 # 不区分大小写。默认搜索是区分大小写的
grep -i pattern files		 # 只匹配整个单词，而不是字符串的一部分（如搜索hello，不会匹配到helloworld）
grep -n pattern files		 # 显示行号信息
grep -c pattern files		 # 显示匹配的行数
grep -l pattern files		 # 只显示匹配的文件名
grep -L pattern files		 # 显示不匹配的文件名
grep -C number pattern files     # 额外显示匹配行的上下[number]行
grep pattern1 | grep pattern2 files     # 显示既匹配pattern1，又匹配pattern2的行
grep -E &quot;pattern1|pattern2&quot; files	# 显示匹配pattern1或者pattern2的行, grep -E相当于egrep

# 用于搜索的特殊字符
^: 表示行前
$: 表示行尾

grep '^#' result.vcf		# 显示VCF文件的表头信息
grep '^hello$' files		# 显示只包含hello的行
grep -v '^\s*$' file		# 删除空白行
</code></pre>
<h2 id="sed"><strong>sed</strong></h2>
<p>sed是stream editor的缩写，中文称之为“流编辑器”。</p>
<pre><code class="language-bash">sed command file
</code></pre>
<ul>
<li>command部分，针对每行要进行的处理</li>
<li>file，要处理的文件</li>
</ul>
<h3 id="actions"><strong>Actions</strong></h3>
<ul>
<li>d：删除该行</li>
<li>p：打印该行</li>
<li>i：在行的前面插入新行</li>
<li>a：在行的后面插入新行</li>
<li>r：读取指定文件的内容。</li>
<li>w：写入指定文件。</li>
</ul>
<pre><code class="language-bash">sed -n '10p' file		# 显示第10行
sed -n '10,20p' file	# 显示第10到20之间的行
sed -n '/pattern/p' file# 显示含有pattern的行
sed -n '/pattern1/,/pattern2/p' file # 显示patter1与pattern2之间的行

sed '10d' file			# 删除第10行
sed '10,20d' file		# 删除第10到20之间的行
sed '/pattern/d'		# 删除匹配pattern的行
sed '/^\s*$/d' file		# 删除空白行
sed 's/^\s*//' file		# 删除行前的空白：空格，制表符
sed 's/\s*$//' file		# 删除行尾的空白：空格，制表符
sed 's/^\s*//;s/\s*$//' file # 删除行首和行尾的空白：空格，制表符

sed 's/AA/BB/' file		# 将文件中的AA替换成BB，只替换一行中第一次出现的AA，替换后的结果输出到屏幕
sed 's/AA/BB/g' file	# 将文件中的所有AA都替换成BB，替换后的结果输出到屏幕
sed -i 's/AA/BB/g' file # 将文件中的所有AA都替换成BB，直接更改文件的内容
sed '/CC/s/AA/BB/g' file# 只替换那些含有CC的行
sed 's/pattern/&amp;XXXX/' file	# 在pattern之后加上XXXX。&amp;表示之前被匹配的内容
sed 's/pattern.*/&amp;XXXX' file# 在匹配pattern的行尾加上XXXX。pattern.*表示包含pattern的整行内容

sed -n '1~4s/^@/&gt;/p;2~4p' file.fq &gt; file.fa	# Fastq文件转Fasta文件
sed -n '2~4p' file.fq		# 提取Fastq文件的序列

sed 'y/ABC/XYZ/' file	# 将ABC逐字替换成XYZ

sed '1i\hello' file		# 在第1行前面插入一行，内容为hello，通常用来为文件增加标题
sed '1a\hello' file		# 在第1行后面插入一行，内容为hello
sed '1r file2' file1	# 在第1行后面读入file2的内容
sed '/pattern/w file2' file1 # 将匹配的行写入file2中
</code></pre>
<h2 id="awk"><strong>awk</strong></h2>
<p>Awk是一个强大的文本分析工具，它每次读入一条记录，并把每条记录切分成字段后进行分析。Awk官方文档是非常好的学习材料，通过<code>man awk</code>查看。</p>
<pre><code class="language-bash">awk 'BEGIN { action } pattern { action } END { action }'
</code></pre>
<p><strong>Awk程序通常是一系列 pattern {action}对：</strong></p>
<p><code>pattern</code>，表示模式匹配，只处理匹配的行。pattern可以省略，表示匹配所有行</p>
<p><code>action</code>，表示对匹配行所做的动作。{actions}可以省略，表示{ print }。<code>BEGIN</code>和<code>END</code>的{action}不能省略</p>
<p><strong>pattern可能是：</strong></p>
<p><code>BEGIN</code>， 执行初始化操作，程序开始时执行一次</p>
<p><code>END</code>，执行收尾工作，程序结束时执行一次</p>
<p><code>expression</code>，一个表达式，既可以是判断语句，也可以是正则表达式</p>
<h3 id="常用参数"><strong>常用参数</strong></h3>
<ul>
<li><code>-F value</code> 设置域分隔符，相当于给FS内置变量赋值</li>
<li><code>-v var=value</code> 将变量value的值赋给程序变量var，-v可以多次使用</li>
</ul>
<h3 id="记录与字段"><strong>记录与字段</strong></h3>
<p>记录是一次读入的内容，通常是文件的一行，保存在字段变量$0中，记录可以被分割成字段，保存在变量$1，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi mathvariant="normal">，</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">2，...，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord cjk_fallback">，</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord cjk_fallback">，</span></span></span></span>NF中。</p>
<h3 id="表达式与操作符"><strong>表达式与操作符</strong></h3>
<p>Awk表达式的符号与C语言的类似，基本的表达式有数字，字符串，变量，字段，数组以及函数调用。变量无需声明，它们在首次使用时被初始化为<code>null</code>。</p>
<pre><code class="language-bash">assignment          =  +=  -=  *=  /=  %=  ^=
conditional         ?  :
logical and         &amp;&amp;
logical or          ||
logical not         !
array membership    in
matching       		~   !~
relational          &lt;  &gt;   &lt;=  &gt;=  ==  !=
concatenation       (no explicit operator)
add ops             +  -
mul ops             *  /  %
unary               +  -
exponentiation      ^
inc and dec         ++ -- (both post and pre)
field               $
</code></pre>
<h3 id="正则表达式"><strong>正则表达式</strong></h3>
<p>在Awk中语言中，通常测试一个记录、字段或字符串是否与一个正则表达式匹配，匹配返回1，不匹配返回0。正则表达式用两个反斜杠<code>/</code>包围。</p>
<pre><code class="language-bash">expr ~ /r/							 # 评估expr是否与r匹配。匹配的意思是expr的一个子串是否在正则表达式r定义的字符串集中。

/r/ { action }, $0 ~ /r/ { action }	 # 两者相同， /r/ 等于 $0 ~ /r/
</code></pre>
<p>任何表达式都可以放到<code>~</code>和<code>!~</code>右边或者内建的需要正则表达式的地方。在必要的时候，该表达式会被转变成字符串，然后作为一个正则表达式来解释。以下三行awk命令完成同样的功能：输出第5列为10的的行。</p>
<pre><code class="language-bash">seq 20 | xargs -n5 &gt; file
# cat file
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20

awk '$5 ~ /10/' file
awk '$5 ~ &quot;10&quot;' file
awk '$5 ~ 10' file
</code></pre>
<h3 id="数组"><strong>数组</strong></h3>
<p>Awk支持一维数组。其表示方法为<code>array[expr]</code>，<code>expr</code>在内部被统一转换成字符串类型，因此A[1]，与A[&quot;1&quot;]相同，事实上索引都是“1”。索引为字符串的数组被称为关联数组。<code>expr in array</code>用于判断数组元素array[expr]是否存在。</p>
<pre><code class="language-bash">for ( var in array ) statement
</code></pre>
<h3 id="控制语句"><strong>控制语句</strong></h3>
<pre><code class="language-bash">if ( expr ) statement
if ( expr ) statement else statement
while ( expr ) statement
do statement while ( expr )
for ( opt_expr ; opt_expr ; opt_expr ) statement
for ( var in array ) statement
continue
break
</code></pre>
<h3 id="内置变量"><strong>内置变量</strong></h3>
<ul>
<li><code>NR</code> - 当前行数</li>
<li><code>NF</code> - 当前行的列数</li>
<li><code>RS</code>，行分隔符，默认是换行符</li>
<li><code>FS</code>，列分隔符，默认是空格和制表符</li>
<li><code>ORS</code>，输出行分隔符，默认为换行符</li>
<li><code>OFS</code>，输出列分隔符，默认为空格</li>
<li><code>FILENAME</code>，当前文件名</li>
</ul>
<h3 id="内置函数"><strong>内置函数</strong></h3>
<h3 id="字符串函数"><strong>字符串函数</strong></h3>
<p>sub()、substr()、gsub()，sprintf()，index()，length()， match()，split()，tolower(), toupper()</p>
<h3 id="数学函数"><strong>数学函数</strong></h3>
<p>sin()，cos(), ...</p>
<h3 id="输入输出"><strong>输入输出</strong></h3>
<p>有两个输出语句，<code>print</code>和<code>printf</code></p>
<pre><code class="language-python">print							# 打印整条记录到标准输出，相当于print $0
print expr1, expr2, ..., exprn	# 打印指定字段到标准输出
printf format, expr-list		# C语言printf函数的重用
</code></pre>
<p>输入函数getline有以下几种形式：</p>
<pre><code class="language-bash">getline							# 读取下一条记录到$0，更新NF，NR和FNR
getline var						# 读取下一条记录到var，更新NR和FNR
getline &lt; file					# 从文件读取记录到$0，更新NF
getline var &lt; file				# 从文件读取记录到var
command | getline				# 通过管道传递command的结果到$0，更新NF
command | getline var			# 通过管道传递command的结果到var
seq 10 | awk '{print $0;getline}'					  # 显示奇数行
seq 10 | awk '{getline; print $0}'					  # 显示偶数行
seq 10 | awk '{getline tmp; print tmp; print $0}'	  # 奇偶行对调

awk 'BEGIN {&quot;date&quot; | getline;close(&quot;date&quot;);print $0}' # 得到系统当前时间

# fastq转换成fasta
awk '{getline seq; getline comment; getline quality; sub(&quot;@&quot;, &quot;&gt;&quot;, $0); print $0&quot;\n&quot;seq}' file
</code></pre>
<h3 id="示例"><strong>示例</strong></h3>
<pre><code class="language-bash">awk '{print $0}' file	# 打印整行
awk '{print $1}' file	# 打印第一列
awk '{print $2}' file	# 打印第二列
awk '{print $NF}' file	# 打印最后一列
awk '{print $(NF-1)}' file#打印倒数第二列
awk -F ';' -v OFS='\t' '{print $1,$2,$NF}' file	# 读入的文件以逗号;分隔列，打印第1列，第2列和最后一列，并且打印时以制表符作为列的分隔符
number=10;awk -v n=$number '{print n}' file	# number的值被传给了程序变量n
awk '$2 &gt; 100' file		# 打印第2列大于100的行
awk 'NR&gt;1 &amp;&amp; NR&lt;4' file # 打印第2~3行

awk '/EGFR/' file		# 打印含有EGFR的行，相当于grep EGFR file
awk '$1 ~ /EGFR/' file	# 打印第1列含有EGFR的列

# 按指定列去除重复行
# cat file
1 2 3 4 5
6 2 8 9 10
11 12 13 14 15
16 17 18 19 20
awk '!a[$2]++' file		# 第二列出现两次2，只保留第一次出现的那一行，结果如下：
1 2 3 4 5
11 12 13 14 15
16 17 18 19 20

awk '{sum+=$1} END {print sum}' file	# 累加文件的第一列
awk '{sum+=$1} END {print sum/NR}' file	# 求第一列的平均数

# 从含有多条fasta序列的文件中提取指定序列
 awk -v RS=&quot;&gt;&quot; '/chr1/ {print $0}' hg19.fa	# 提取chr1的序列
 awk -v RS=&quot;&gt;&quot; '/chr1|chr2/ {print $0}' hg19.fa	# 提取chr1和chr2的序列
</code></pre>
<h2 id="bash脚本模板"><strong>Bash脚本模板</strong></h2>
<pre><code class="language-bash">#!/bin/bash

command1

command2

...
</code></pre>
<p><code>chmod +x run.sh</code> 给run.sh脚本增加可执行权限</p>
<p>执行脚本，以下三种方式都可以：</p>
<pre><code class="language-bash"># 脚本在前台执行，标准输出和标准错误输出到屏幕
./run.sh
bash run.sh
sh run.sh		# 前提sh链接到了bash，如果没有，需要root权限执行命令：ln -sf /bin/bash /bin/sh

# 脚本在前台执行，标准输出和标准错误保存到文件
./run.sh &amp;&gt; run.sh.o

# 脚本在后台执行，在最后加上一个&amp;符号
./run.sh &amp;&gt; run.sh.o &amp;

# 脚本在后台执行，并且防断线（长时间运行任务时使用）
nohup ./run.sh &amp;&gt; run.sh.o &amp;
</code></pre>
<h2 id="其他命令"><strong>其他命令</strong></h2>
<pre><code class="language-bash">echo $PATH		# 显示环境变量
time command	# 显示命令执行时间
date			# 显示日期和时间
history			# 显示历史命令
export PATH=$PATH:/path/to/bin	# 将路径加入环境变量中
ln -s file file2# 为file文件创建软链接，名称为file2
exit			# 退出登录
Tab键自动补全	 # Tab键可以补全命令或文件路径，输入部分命令或路径时，尝试按Tab键补全
Ctrl + c		# 中止当前命令的执行
seq 10			# 产生1到10的整数
md5sum			# 生成，或验证文件的MD5值
</code></pre>
<hr>
<h2 id="1-帮助命令">1. 帮助命令</h2>
<p>1.1 <code>man 命令名称</code>，man 的意思是 manual，即手册，对于大多数命令都可以使用这个命令来查看其使用的方法。</p>
<p>1.2 <code>help 命令名称</code> 或者 <code>命令名称 --help</code>，可以查看命令的使用帮助。</p>
<h2 id="2-目录操作">2. 目录操作</h2>
<p>2.1 <code>pwd</code>，查看当前所在的目录路径。</p>
<p>2.2 <code>ls 路径</code>，查看指定路径下的文件列表，可以加上多个路径，例如：<code>ls /usr /etc</code>，分别显示根目录下的 user 目录和 etc 目录。</p>
<p>ls 命令的常用参数有：</p>
<ul>
<li><code>-a</code>，显示隐藏的目录或文件</li>
<li><code>-l</code>，显示文件的详细信息，<code>ls -l</code> 等价于 <code>ll</code></li>
<li><code>-h</code>，格式化显示文件的大小，如 1K，3M，1G，方便阅读</li>
<li><code>-t</code>，以修改时间排序文件列表</li>
<li><code>-r</code>，反序排序列表</li>
<li><code>-R</code>，递归显示所有子文件夹的内容</li>
<li><code>-S</code>，大写的 S，以文件的大小排序</li>
</ul>
<p>2.3 <code>cd 路径</code>，cd 的意思是 change directory，改变路径。</p>
<p>2.4 <code>mkdir 目录名称</code>，创建目录，可以加多个参数创建多个目录，例如 <code>mkdir /tmp/a /tmp/b</code>。</p>
<p>常用参数：<code>-p</code>，表示创建多级不存在的目录。</p>
<p>2.5 <code>rmdir 目录</code>，删除目录，注意只能删除空目录。</p>
<p>2.6 <code>cp</code>，复制文件或者目录的命令，例如将一个文件复制到另一个目录中：<code>cp test.txt /usr/local/</code></p>
<p>常用参数：</p>
<ul>
<li><code>-r</code>，用于复制目录，递归目录中的所有内容</li>
<li><code>-v</code>，显示复制的详细信息</li>
</ul>
<p>2.7 <code>mv</code>，这个命令有两个功能，一是重命名文件或文件夹，例如 <code>mv a.txt b.txt</code>，二是移动文件，例如将文件 a.txt 移动至 root 目录下 <code>mv a.txt /root/</code>。</p>
<h2 id="3-查看文件">3. 查看文件</h2>
<p>3.1 <code>cat 文件名</code>，查看文件的全部内容，常用参数 <code>-n</code>，可显示文件的行号。</p>
<p>3.2 <code>head 文件名</code>，查看文件头部的内容，默认显示前 10 行，可加参数 <code>-行数</code> 查看前 n 行，例如 <code>head -30 文件名</code>。</p>
<p>3.3 <code>tail 文件名</code>，查看文件尾部的内容，默认显示最后 10 行，常用参数 <code>-f</code>，可查看追加的文件内容。</p>
<p>3.4 <code>wc 文件名</code>，查看文件的统计信息，常用参数：</p>
<ul>
<li><code>-l</code>，显示文件的行数</li>
<li><code>-w</code>，显示文件内的总单词数</li>
<li><code>-c</code>，文件的字节数大小</li>
</ul>
<h2 id="4-压缩解压">4. 压缩解压</h2>
<p>4.1 打包命令：<code>tar cf 打包后存放路径和文件名 源文件</code>，例如打包根目录下的 /etc，命令：<code>tar cf /temp/etc-backup.tar /etc</code>，使用这个参数打包，不用压缩源文件。</p>
<p>4.1 压缩打包：</p>
<ul>
<li>gz 格式：<code>tar czf /temp/etc-backup.tar.gz /etc</code></li>
<li>bz2 格式：<code>tar cjf /temp/etc-backup.tar.bz2 /etc</code></li>
</ul>
<p>两种格式的区别：gz 格式压缩速度更快，bz2 个格式压缩后的文件更小。</p>
<p>.tar.gz 可以缩写为 <strong>.tgz</strong>，.tar.bz2 可以缩写为 <strong>.tbz2</strong>。</p>
<p>4.2 解压命令：</p>
<ul>
<li>解压 <strong>.tar</strong> 格式的文件：<code>tar xf 文件名</code>，可加参数 -C，指定解压后的存储路径</li>
<li>解压 <strong>.tar.gz</strong> 格式的文件：<code>tar zxf 文件名</code></li>
<li>解压 <strong>.tar.bz2</strong> 格式的文件：<code>tar jxf 文件名</code></li>
</ul>
<h2 id="5-权限操作">5. 权限操作</h2>
<p>5.1 添加用户：<code>useradd 用户名</code>。</p>
<p>5.2 修改用户密码：<code>passwd 用户名</code>，不加用户名的话，则默认修改当前用户的密码。</p>
<p>5.3 删除用户：<code>userdel 用户名</code>，可加参数 -f 强制删除，-r 删除用户主目录。</p>
<p>5.4 新建用户组：<code>groupadd 用户组名称</code>。</p>
<p>5.5 将某个用户加入到某个用户组中：<code>usermod -g 用户组名称 用户名</code></p>
<p>5.6 修改文件权限，文件权限的表示为 r（可读），w（可写），x（可执行），数字表示分别是 4， 2，1。</p>
<p><code>chmod u+x a.txt</code>，表示对文件 a.txt 添加可执行权限，选项 u 表示所属用户，类似的有 g（属组）、a（全部）；+ 表示添加权限，- 表示删除权限</p>
<p>5.7 修改文件的属主和属组权限：<code>chown root:root a.txt</code>，其中 : 前面的表示所属用户，后面的表示所属用户组。</p>
<p>也可以单独改变属主和属组的权限：</p>
<ul>
<li><code>chown root a.txt</code>，改变所属用户。</li>
<li><code>chown :root a.txt</code>，改变所属用户组。</li>
</ul>
<h2 id="6-软件安装">6. 软件安装</h2>
<p>6.1 rpm 包管理，文件后缀一般是以 .rpm 结尾的。</p>
<ul>
<li>安装的命令：<code>rpm -i xxx.rpm</code>，如果安装的包需要有其他的依赖，则会提示先手动安装依赖。</li>
<li>查看安装的软件包：<code>rpm -qa</code>，可加管道过滤想查询的软件包，<code>rpm -qa | grep mysql</code> 。</li>
<li>卸载软件包命令：<code>rpm -e 软件包名称</code>，注意这里必须输入软件包的名字全程。常加参数 <code>--nodeps</code> 表示卸载时不检查依赖。</li>
</ul>
<p>6.2 yum 是一个基于 rpm 的包管理器，可以自己检查依赖，维护包的升级移除，更加的自动化，在实际中的使用也更多。</p>
<ul>
<li>安装软件包：<code>yum install 软件包名称</code></li>
<li>卸载：<code>yum remove 软件包名称</code></li>
<li>查看安装的软件：<code>yum list</code></li>
</ul>
<p>6.3 Linux 上安装软件的第三种方式是源代码编译安装，在下载好的源代码中一般有一个 configure 文件，安装的步骤为：</p>
<ul>
<li>进入软件包目录，执行 configure 文件，<code>./configure --prefix=/软件包安装路径</code></li>
<li>然后执行命令 <code>make</code>，或者按照指示执行 <code>gmake</code>，两者是类似的命令</li>
<li>然后再执行 <code>make install</code>命令</li>
</ul>
<h2 id="7-vim命令">7. Vim命令</h2>
<p>Vim 是在 Linux 上经常使用的一个文本编辑器，熟练使用 Vim 的常用命令也是有必要的。</p>
<p>7.1 输入 <code>vim 文件名</code> 则进入了 vim 的正常模式，常用命令如下：</p>
<ul>
<li>插入：
<ul>
<li>i（光标处前一个字符编辑），I（大写的 i，光标所处行首编辑）</li>
<li>a（光标处后一个字符编辑），A（光标所处行尾编辑）</li>
<li>o（光标处向下新建一行编辑），O（大写的 o，光标处向上新建一行编辑）</li>
</ul>
</li>
<li>复制：
<ul>
<li>复制单行：光标处所处行按 YY，然后在目标行按 P</li>
<li>复制多行：按数字 + YY，例如复制 3 行，在光标处按 3 YY，然后在目标行按 P</li>
</ul>
</li>
<li>剪切：
<ul>
<li>剪切单行：光标所在行按 DD</li>
<li>剪切多行：数字 + DD</li>
</ul>
</li>
<li>撤销：按 U</li>
<li>删除光标所处的字符：X</li>
<li>替换光标所处的字符：按 R 后输入新的字符</li>
<li>光标移动至某行：行数 + GG</li>
<li>显示文件行数：按 ：后输入命令 <code>set nu</code></li>
<li>移动至文件的第一行：GG</li>
<li>移动至文件最后一行：shift + G</li>
<li>移动至一行的开头：shift + 6</li>
<li>移动至一行的末尾：shift + 4</li>
</ul>
<p>7.2 vim 的命令模式：</p>
<ul>
<li>
<p><code>:w /usr/local/a.txt</code>，w 表示保存，后面可以跟上保存的路径和文件名称</p>
</li>
<li>
<p><code>:wq</code> 表示保存并退出，<code>:q!</code> 表示强制退出，不保存修改</p>
</li>
<li>
<p><code>:! 其他Linux命令</code>，输入 ! 可以进入临时的命令模式，在编辑文件的时候执行其他的命令，按 Enter 键回到正在编辑的文件中</p>
</li>
<li>
<pre><code>/ 字符
</code></pre>
<p>，可以搜索文件中的内容，搜索后，匹配的文本会高亮显示，按 N 移动至下一个匹配的结果，按 shift + N 移动至上一个。</p>
<ul>
<li>搜索后的文件会高亮显示，如果需要取消高亮显示，输入命令：<code>:set nohlsearch</code>，如果需要重新高亮显示，去掉命令中的 no 即可：<code>:set hlsearch</code></li>
</ul>
</li>
<li>
<p>替换搜索到的内容：<code>:s/原文本/新的内容</code>，默认只会替换光标所在行的第一处搜索匹配的内容</p>
</li>
<li>
<p>全局替换搜索到的内容：<code>:%s/原文本/新的内容</code></p>
</li>
<li>
<p>如果匹配的内容有连续的，则全局替换时需要加参数 g：<code>:%s/原文本/新文件/g</code></p>
</li>
<li>
<p>替换某行的内容：<code>m,ns/原文本/新的内容</code>， m、n 分别表示起始行和结束行，同理也可加参数 /g 替换有连续匹配的内容。</p>
</li>
</ul>
<h1 id="考题">考题</h1>
<hr>
<h2 id="00-平常用什么-linux-命令比较多如何打开文件并进行查找某个单词怎么在某个目录下找到包含-txt-的文件">00 平常用什么 linux 命令比较多？如何打开文件并进行查找某个单词？怎么在某个目录下找到包含 txt 的文件？</h2>
<p>pwd：显示当前所在位置</p>
<p>sudo + 其他命令：以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。</p>
<p>grep：要搜索的字符串 要搜索的文件 --color ： 搜索命令，--color 代表高亮显示</p>
<p>ps - ef/ps aux： 这两个命令都是查看当前系统正在运行进程，两者的区别是展示格式不同。如果想要查看特定的进程可以使用这样的格式：</p>
<pre><code class="language-shell"> ps aux|grep redis
</code></pre>
<p>（查看包括redis的进程），也可使用</p>
<pre><code class="language-shell">pgrep redis -a
</code></pre>
<p>注意：如果直接用ps（（Process Status））命令，会显示所有进程的状态，通常结合 grep 命令查看某进程的状态。</p>
<p>kill -9 进程的 pid ： 杀死进程（-9 表示强制终止），先用 ps 查找进程，然后用 kill 杀掉。</p>
<p>find 目录 参数 ： 寻找目录（查）。在/home目录下查找以 .txt 结尾的文件名:</p>
<pre><code class="language-shell">find /home -name &quot;*.txt&quot;
</code></pre>
<p>ls 或者 ll :（ll 是 ls -l 的别名，ll 命令可以看到该目录下的所有目录和文件的详细信息）： 查看目录信息。</p>
<p>free : 显示系统内存的使用情况，包括物理内存、交换内存(swap)和内核缓冲区内存。</p>
<p>tar -zcvf 打包压缩后的文件名 要打包压缩的文件 : 打包并压缩文件，一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般 .tar.gz。c：压缩。</p>
<p>tar -xvf 压缩文件 - C 解压的位置 : 解压压缩包。x: 解压。</p>
<p>wget : 是从远程下载的工具。</p>
<p>vmstat : 虚拟内存性能监控、CPU 监控。</p>
<p>top : 常用来监控Linux的系统状况，比如CPU、内存的使用，显示系统上正在运行的进程。load average：系统负载，就是进程队列的长度。当这个值&gt;cpu核心数的时候就说明有进程在等待处理了，是负载过重。</p>
<p>2.18 用过 ping 命令么？简单介绍一下。TTL 是什么意思？<br>
ping : 查看与某台机器的连接情况。TTL：生存时间。数据报被路由器丢弃之前允许通过的网段数量。</p>
<p>2.19 怎么判断一个主机是不是开放某个端口？<br>
telnet IP 地址 端口</p>
<pre><code class="language-shell">telnet  127.0.0.1 3389 
</code></pre>
<h2 id="快捷键">快捷键</h2>
<p>接下来是大家很熟悉的一个环节了，许多软件都内置了快捷键供用户使用，Linux/Shell 也不例外，熟悉这些快捷键可以极大提高我们的工作效率，我尤其推荐那些用来“移动光标”的命令。有时候我们输入的命令很长，会遇到一些“卡在中间、进退两难”的情况，这时候它们可能会发挥大的作用哦：</p>
<table>
<thead>
<tr>
<th>快捷键名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>CTRL+A</td>
<td>把光标移到命令行开头</td>
</tr>
<tr>
<td>CTRL+E</td>
<td>把光标移到命令行结尾</td>
</tr>
<tr>
<td>CTRL+C</td>
<td>强制终止当前命令</td>
</tr>
<tr>
<td>CTRL+L</td>
<td>清屏，相当于clear命令</td>
</tr>
<tr>
<td>CTRL+U</td>
<td>删除/剪切当前行、光标前的内容</td>
</tr>
<tr>
<td>CTRL+K</td>
<td>删除/剪切当前行、光标后的内容</td>
</tr>
<tr>
<td>CTRL+Y</td>
<td>粘贴CTRL+U/K中剪切的内容</td>
</tr>
<tr>
<td>CTRL+R</td>
<td>在历史命令中搜索</td>
</tr>
<tr>
<td>CTRL+D</td>
<td>退出当前终端</td>
</tr>
<tr>
<td>CTRL+Z</td>
<td>刮起当前进程</td>
</tr>
<tr>
<td>CTRL+S</td>
<td>暂停屏幕输出</td>
</tr>
<tr>
<td>CTRL+Q</td>
<td>恢复屏幕输出</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker基础笔记]]></title>
        <id>https://flyingchase.github.io/post/docker-ji-chu-bi-ji/</id>
        <link href="https://flyingchase.github.io/post/docker-ji-chu-bi-ji/">
        </link>
        <updated>2021-05-03T12:25:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="00-虚拟化容器介绍">00 虚拟化容器介绍</h2>
<ul>
<li>
<p>虚拟机的不足之处在于对物理服务器资源的消耗，当我们在物理服务器创建一台虚拟机时，便需要虚拟出一套硬件并在上面运行完整的操作系统，每台虚拟机都占用许多的服务器资源。</p>
</li>
<li>
<p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。</p>
</li>
<li>
<p><code>Docker</code>是使用时下很火的<code>Golang</code>语言进行开发的，其技术核心是<code>Linux</code>内核的<code>Cgroup</code>,<code>Namespace</code>和<code>AUFS</code>类的<code>Union FS</code>等技术，这些技术都是<code>Linux</code>内核中早已存在很多年的技术，所以严格来说<code>Docker</code>并不是一个完全创新的技术，<code>Docker</code>通过这些底层的<code>Linux</code>技术，对<code>Linux</code>进程进行封装隔离，而被隔离的进程也被称为容器，完全独立于宿主机的进程。</p>
</li>
<li>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/aTm088.png" alt="aTm088" loading="lazy"></figure>
</li>
<li>
<p>Docker &amp; 虚拟机 比较</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/image-20210401175039725.png" alt="image-20210401175039725" loading="lazy"></figure>
</li>
</ul>
<p>0</p>
<h2 id="01-docker基本概念">01 Docker基本概念</h2>
<h3 id="0101-镜像-image">01.01 镜像 Image</h3>
<ul>
<li>
<p>Root 文件系统 提供容器运行时的程序 库 资源 配置等文件和配置参数</p>
<pre><code class="language-bash"># 列出镜像
docker image ls
# 拉取镜像
docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
# 拉取一个镜像，需要指定Docker Registry的地址和端口号，默认是Docker Hub，还需要指定仓库名和标签，仓库名和标签唯一确定一个镜像，而标签是可能省略，如果省略，则默认使用latest作为标签名，另外，仓库名则由作者名和软件名组成。
# 运行镜像
docker run -it centos /bin/bash
# image_name表示镜像名，image_id表示镜像id
dockere image rm image_name/image_id

</code></pre>
</li>
<li>
<p><code>docker images</code> ：列出 docker host 机器上的镜像，可以使用 <code>-f</code> 进行过滤</p>
</li>
<li>
<p><code>docker build</code>：从 Dockerfile 中构建出一个镜像</p>
</li>
<li>
<p><code>docker history</code>：列出某个镜像的历史</p>
</li>
<li>
<p><code>dockerimport</code>：从 tarball 中创建一个新的文件系统镜像</p>
</li>
<li>
<p><code>docker pull</code>：从 docker registry 拉去镜像</p>
</li>
<li>
<p><code>docker push</code>：把本地镜像推送到 registry</p>
</li>
<li>
<p><code>docker rmi</code>：删除镜像</p>
</li>
<li>
<p><code>docker save</code>：把镜像保存为 tar 文件</p>
</li>
<li>
<p><code>docker search</code>：在 docker hub 上搜索镜像</p>
</li>
<li>
<p><code>docker tag</code>：为镜像打上 tag 标记</p>
</li>
</ul>
<h3 id="0102-容器-container">01.02 容器 container</h3>
<p>镜像是生成容器的模版</p>
<p><strong>镜像&amp;&amp;容器</strong></p>
<p>​	面向对象中的 类与对象的关系</p>
<pre><code class="language-bash"># 查看容器
docker container ls
docker ps
# 删除容器
docker rm container_id # (docker ps 可以看见container_id)
# 进入容器
docker exec -it container_id command

</code></pre>
<h3 id="0103-仓库-repository">01.03 仓库 Repository</h3>
<p>类似GitHub进行集中储存和分发镜像的服务</p>
<p>默认Docker Hub <code>hub.docker.com</code></p>
<h3 id="0104-docker架构">01.04 Docker架构</h3>
<p>使用C/S模型 通过客客户端调用服务端 Docker 客户端与 Docker 服务器进行交互，Docker服务端负责构建、运行和分发 Docker 镜像。</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/image-20210401182157890.png" alt="image-20210401182157890" loading="lazy"></figure>
<p>Docker Daemon 是服务器组建 为守护进程 响应客户端的请求并翻译为系统调用完成容器的管理操作</p>
<h2 id="02-打包程序">02 打包程序</h2>
<p>**普通打包方式: **</p>
<p>以js打包为例</p>
<ul>
<li>start with an OS</li>
<li>Install Node</li>
<li>Copy app files</li>
<li>Run node app.js</li>
</ul>
<p><strong>Dockerfileff打包:</strong></p>
<ul>
<li>首字母D大写 其他均小写 无后缀</li>
<li>FROM 镜像文件</li>
</ul>
<pre><code class="language-shell">docker build -t hellodocker .
docker images
docker image ls //列举出来的tag可以进行版本公职 versioning 

</code></pre>
<pre><code class="language-shell"># 回顾基础Linux操作commad
# 查看文件前2行
head -n 2 *.txt
# 查看文件最后2行
tail -n 2 *.txt
# less more查看长文件
# 重定向 &gt;
cat # 串联+合并 
</code></pre>
]]></content>
    </entry>
</feed>