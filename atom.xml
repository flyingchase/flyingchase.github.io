<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://flyingchase.github.io</id>
    <title>flyingchase</title>
    <updated>2021-10-03T11:46:07.714Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://flyingchase.github.io"/>
    <link rel="self" href="https://flyingchase.github.io/atom.xml"/>
    <subtitle>记录成长的脚印</subtitle>
    <logo>https://flyingchase.github.io/images/avatar.png</logo>
    <icon>https://flyingchase.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, flyingchase</rights>
    <entry>
        <title type="html"><![CDATA[【Golang 数据结构】实现堆 Heap]]></title>
        <id>https://flyingchase.github.io/post/golang-shu-ju-jie-gou-shi-xian-dui-heap/</id>
        <link href="https://flyingchase.github.io/post/golang-shu-ju-jie-gou-shi-xian-dui-heap/">
        </link>
        <updated>2021-10-03T11:45:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-go">
import (
	&quot;errors&quot;
)

/*
实现二叉堆
	- 添加
	- 删除堆顶
	- 获取堆顶
	- 堆化
*/

const DefaultCapacity = 16

type BinaryHeap struct {
	data     []int
	size     int
	capacity int
}

func Default() *BinaryHeap {
	return New(DefaultCapacity)
}

func New(capacity int) *BinaryHeap {
	return &amp;BinaryHeap{
		data:     make([]int, capacity),
		size:     0,
		capacity: capacity,
	}
}

// 添加元素
//  现将元素添加到堆尾 再自下而上不断比较 (index-1)/2比较 移至合适位置
func (h *BinaryHeap) Add(val int) bool {
	if h.size &gt;= h.capacity {
		return false
	}
	// 将 val 加入堆尾 再自下向上调整 不断与 parent=(index-1)/2 比较
	h.data[h.size] = val
	h.size++
	index := h.size - 1
	parent := (index - 1) / 2
	for parent &gt;= 0 &amp;&amp; h.data[index] &lt; h.data[parent] {
		h.data[index], h.data[parent] = h.data[parent], h.data[index]
		index, parent = parent, (index-1)/2
	}
	return true
}

// 删除堆顶元素
func (h *BinaryHeap) Remove() error {
	if h.size &lt;= 0 {
		return errors.New(&quot;heap is null&quot;)
	}
	h.size--
	if h.size &gt; 0 {
		h.data[0] = h.data[h.size-1]
		shiftDown(h, 0, h.size)
	}
	return nil

}

func shiftDown(h *BinaryHeap, index int, size int) {
	left, right := 2*index+1, 2*index+2
	largest := left
	for index &lt; size {
		if right &lt; size &amp;&amp; h.data[right] &lt; h.data[left] {
			largest = right
		}
		if h.data[index] &gt; h.data[largest] {
			largest = index
			break
		}
		h.data[index],h.data[largest]=h.data[largest],h.data[index]
		index=largest
		left=2*index+1
		right=2*index+2
	}
}

// 获取堆顶元素

func (h BinaryHeap)GetTop()int  {
	if h.size&lt;=0 {
		panic(&quot;heap is null&quot;)
	}
	return h.data[0]
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Golang 数据结构】实现单链表]]></title>
        <id>https://flyingchase.github.io/post/golang-shu-ju-jie-gou-shi-xian-dan-lian-biao/</id>
        <link href="https://flyingchase.github.io/post/golang-shu-ju-jie-gou-shi-xian-dan-lian-biao/">
        </link>
        <updated>2021-10-03T11:44:01.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-go">
import &quot;fmt&quot;

/*
实现单链表
	- append
	- 结点前后插入
	- 依值查找
	- 删除结点
	- 打印链表值
*/

type ListNode struct {
	Val  interface{}
	Next *ListNode
}
type LinkedList struct {
	head *ListNode
	size int
}

// 创建结点
func newNode(val interface{}) *ListNode {
	return &amp;ListNode{

		Val:  val,
		Next: nil,
	}
}
func New() *LinkedList {
	return &amp;LinkedList{
		head: nil,
		size: 0,
	}
}

//添加至链尾 并返回生成的结点
func (lists *LinkedList) PushBack(val interface{}) *ListNode {
	head := lists.head
	// 将待插入值转化为 node
	node := newNode(val)
	if head == nil {
		lists.head = node
	} else {
		for head.Next != nil {
			head = head.Next
		}
		head.Next = node
	}
	lists.size++
	return node
}

//结点前插入
func (lists *LinkedList) PushBefore(p *ListNode, val interface{}) *ListNode {
	if p == nil || lists.head == nil {
		return nil
	}
	node := newNode(val)
	// 在头结点之前插入情况
	if p == lists.head {
		node.Next = lists.head
		lists.head = node
	} else {
		prev := lists.head
		// 找到待插入节点的前一个节点
		for ; prev.Next != p; prev = prev.Next {
		}
		node.Next = p
		prev.Next = node
	}
	lists.size++
	return node
}

//结点后插入
func (lists *LinkedList) PushAfter(p *ListNode, val interface{}) *ListNode {

	if p == nil {
		return nil
	}
	node := newNode(val)
	node.Next = p.Next
	p.Next = node
	lists.size++
	return node
}

//查找结点
func (lists *LinkedList) Find(val interface{}) *ListNode {
	cur := lists.head
	for cur != nil &amp;&amp; cur.Val != val {
		cur = cur.Next
	}
	return cur
}

//删除指定结点
func (lists *LinkedList) Delete(p *ListNode) {
	if p == nil {
		return
	}
	if p == lists.head {
		// 待删结点为头结点
		lists.head = lists.head.Next
		lists.size--
	} else {
		// 非删除头结点时 找到待删结点的 prev 结点
		prev := lists.head
		for prev != nil &amp;&amp; prev.Next != p {
			prev = prev.Next
		}
		// 保证找到 而非 prev 走到链尾
		if prev != nil {
			prev.Next = p.Next
			lists.size--
		}
	}
}

//删除指定值结点 调用 find 找到指定值的结点再删除结点即可
func (lists *LinkedList)DeleteVal(val interface{})  {
	lists.Delete(lists.Find(val))
}
//打印链表值
func (lists *LinkedList)PrintDara()  {
	if lists.size==0 {
		return
	}
	for node:=lists.head;node!=nil;node = node.Next {
		fmt.Print(node.Val,&quot; &quot;)
	}
	fmt.Println()
}

</code></pre>
<pre><code class="language-go">package doublyLinkedlist

import &quot;fmt&quot;

/*
实现双向链表
	- CRUD
	- 表头和表尾的追加
*/
type ListNode struct {
    Val interface{}
    prev,next *ListNode
}
type LinkedList struct {
    head *ListNode
    size int
}

func New()*LinkedList  {
   return &amp; LinkedList {
       head: nil,
       size: 0,
   }
}
// 插入到表头 区分表头是否空
func (lists * LinkedList)PushFront(val interface{}) *ListNode  {
   node:=newNode(val)
	if lists.head!=nil {
		lists.head.prev=node
		node.next=lists.head
	}
	lists.head=node
	lists.size++
	return node
}

func newNode(val interface{}) *ListNode{
	return &amp; ListNode {
	    Val: val,
	    prev: nil,
	    next: nil,
	}
}

// 插入数据到链尾
func (lists * LinkedList) PushBack(val interface{}) *ListNode{
	//  空表则调用链首插入
	if lists.head==nil {
		lists.PushFront(val)
	}
	node:=newNode(val)
	cur:=lists.head
	for cur.next != nil {
		cur=cur.next
	}
	cur.next=node
	node.prev=cur
	lists.size++
	return node
}
//节点后插入数据
func (lists * LinkedList) PushAfter(p *ListNode, val interface{})  *ListNode {

	if p==nil {
		return nil
	}
	// 找到要插入位置的前后结点
	next:=p.next
	node:=newNode(val)
	// 插入 注意判断 next 为空时next.prev 不存在 无须链接 新插入的 node 即为最后一个节点
	node.next=next
	p.next=node
	node.prev=p
	if next!=nil {
		next.prev=node
	}
	lists.size++
	return node
}
//结点前插入数据
func (lists * LinkedList)PushBefore(p *ListNode,val interface{}) *ListNode {
	if p==nil {
		return nil
	}
	node:=newNode(val)
	prev:=p.prev
	// 待插入的链表为空则调用链首插入函数
	if prev==nil {
		lists.PushFront(val)
	}else {
		// 在指定结点前插入需找到prevNode
		p.prev=node
		node.next=p
		prev.next=node
		node.prev=prev
		lists.size++
	}

	return node
}
//删除结点
func (lists * LinkedList) Delete(p *ListNode)  {
	if p == nil|| lists.head==nil {
		return
	}
	// 删除结点为头结点则直接跳过即可
	if p==lists.head {
		lists.head=p.next
	}else {
		//  注意待删结点的 nextNode 为链尾空节点时 无须链接 nextNode.prev=prevNode
		prevNode,nextNode:=p.prev,p.next
		prevNode.next=nextNode
		if nextNode!=nil {
			nextNode.prev=prevNode
		}
	}
	lists.size--

}
//依值查找结点
func (lists * LinkedList)Find(val interface{}) *ListNode  {
	if lists.head==nil{
		return nil
	}
	cur:=lists.head
	for cur!=nil&amp;&amp;cur.Val!=val {
		cur=cur.next
	}
	return cur
}
//打印链表数据
func (lists * LinkedList)PrintDara()  {
	for p:=lists.head;p!=nil;p=p.next {
		fmt.Print(p.Val,&quot; &quot;)
	}
	fmt.Println()
}
func (lists * LinkedList)Size() int  {
	return lists.size
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Golang 数据结构】实现动态扩容链表]]></title>
        <id>https://flyingchase.github.io/post/golang-shu-ju-jie-gou-shi-xian-dong-tai-kuo-rong-lian-biao/</id>
        <link href="https://flyingchase.github.io/post/golang-shu-ju-jie-gou-shi-xian-dong-tai-kuo-rong-lian-biao/">
        </link>
        <updated>2021-10-03T11:42:19.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-go">
import (
	&quot;errors&quot;
	&quot;fmt&quot;
)

const DefaultCapacity = 16

// capacity最大值
const CapacityThreshold = 1024

type Array struct {
	data     []interface{}
	capacity int
	size     int
}

func New(capacity int) *Array {
	if capacity == 0 {
		return nil

	}
	return &amp;Array{
		capacity: capacity,
		data:     make([]interface{}, capacity, capacity),
		size:     0,
	}
}
func Default() *Array {
	return New(DefaultCapacity)
}

// insert element 注意扩容
func (arr *Array) Add(index int, val interface{}) error {
	err := arr.checkIndex(index)
	if err != nil {
		return err
	}
	//	扩容j
	if arr.size &gt;= arr.capacity {
		if arr.capacity &gt;= CapacityThreshold {
			// 1.25倍扩容 传入的是容量
			arr.resize(int(float64(arr.capacity) * 1.25))
		} else {
			// 2 倍扩容
			arr.resize(arr.capacity &lt;&lt; 1)
		}
	}
	// 移出待插入的位置
	copy(arr.data[index+1:], arr.data[index:])
	arr.data[index] = val
	arr.size++
	return nil
}

// 追加 append
func (arr *Array) Append(val interface{}) error {
	// 在数组最后位置追加
	return arr.Add(arr.size, val)
}

// 查找
func (arr *Array) Find(index int) (interface{}, error) {
	err := arr.checkIndex(index)
	if err != nil {
		return nil, err
	}
	return arr.data[index], nil
}

func (arr *Array) checkIndex(index int) error {
	if index &lt; 0 || index &gt; arr.capacity {
		return errors.New(&quot;index out of range error&quot;)
	}
	return nil
}
func (arr *Array) resize(newCap int) {
	// 创建新的 data 数组再覆盖即可
	data := make([]interface{}, newCap, newCap)
	copy(data, arr.data)
	arr.data = data
	arr.capacity = newCap
}
// 是否包含特定元素 遍历查找
func (arr *Array)Contains(val interface{}) bool  {
	if arr.Empty()  {
		return false
	}
	for _,v:=range arr.data {
		if v==val {
			return true
		}
	}
	return false

}

func (arr *Array) Empty() bool {
	return arr.size==0
}
// 删除 idnex 的值
func (arr *Array) Delete (index int) error {
	err:=arr.checkIndex(index)
	if err != nil {
		return err
	}
	if arr.data[index]==nil {
		return nil
	}
	// index 下表位置置空并前移数组
	arr.data[index]=nil
	copy(arr.data[index:],arr.data[index+1:])
	// 处理 size 和数组的最后一位
	arr.data[arr.size-1]=nil
	arr.size--
	return nil
}
func (arr *Array)Size() int  {
	return arr.size
}
func (arr *Array)PrintData()  {
	for i:=0;i&lt;arr.capacity;i++ {
		if arr.data[i]!=nil {
			fmt.Print(arr.data[i],&quot; &quot;)
		}
	}
	fmt.Println()
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Neovim 配置]]></title>
        <id>https://flyingchase.github.io/post/neovim-pei-zhi/</id>
        <link href="https://flyingchase.github.io/post/neovim-pei-zhi/">
        </link>
        <updated>2021-10-02T10:08:13.000Z</updated>
        <content type="html"><![CDATA[<p>neovim 配置</p>
<h2 id="前言">前言</h2>
<p>最近纠正完自己的指法后重新捡起了 vim</p>
<p>考虑到自己的需求和刷题的要求，在 idea 和 goland 中均配置了 <code>.ideavimrc</code></p>
<p>选择 neovim 配置 go 的开发环境</p>
<p>个人向配置，因此略过相关依赖的安装教程，大量参考其他配置</p>
<h2 id="安装">安装</h2>
<h3 id="检查">检查</h3>
<p>nvim 中输入<code>:checkhealth</code>检查依赖完成度</p>
<h3 id="插件管理器">插件管理器</h3>
<p><code>vim-plug</code> 注意安装的位置</p>
<pre><code class="language-shell">call plug#begin()

call plug#end()
</code></pre>
<ul>
<li>安装插件：<code>:PlugInstall</code></li>
<li>更新插件：<code>:PlugUpdate</code></li>
<li>删除插件：<code>:PlugClean</code> （首先在 <code>init.vim</code> 中，注释掉该插件，然后打开 Nvim， 使用 <code>:PlugClean</code> 命令清除该插件）</li>
<li>查看插件状态：<code>:PlugStatus</code></li>
<li>升级 vim-plug：<code>:PlugUpgrade</code></li>
</ul>
<h2 id="插件">插件</h2>
<h3 id="vim-airline">vim-airline</h3>
<p>底部状态栏</p>
<p>底部状态栏的主题美化需要配合<code>vim-arilene-themes</code>插件</p>
<p>状态栏主题：<code>let g:airline_theme='themeName'</code></p>
<h3 id="nerdtree">nerdtree</h3>
<p>文件管理器</p>
<pre><code class="language-shell">&quot;==============================================================================
&quot; 项目管理 nerdtree 设置

nnoremap &lt;leader&gt;v :NERDTreeFind&lt;cr&gt;
highlight NERDTreeFile ctermfg=14
nnoremap &lt;leader&gt;g :NERDTreeToggle&lt;cr&gt;
</code></pre>
<p><code>leader+v/g</code> 找到当前文件所在的目录和打开侧边栏目录</p>
<p><code>gi/gs</code> 目录树中以分割视图打开文件</p>
<h3 id="cocnvim">coc.nvim</h3>
<p>代码补全插件</p>
<p>默认路径在<code>~/.config/nvim/coc-settings.json</code> 配置文件添加 golang 相关配置</p>
<pre><code class="language-json">{
    &quot;languageserver&quot;: {
        &quot;golang&quot;: {
            &quot;command&quot;: &quot;gopls&quot;,
            &quot;rootPatterns&quot;: [
                &quot;go.mod&quot;
            ],
            &quot;filetypes&quot;: [
                &quot;go&quot;
            ]
        }
    },
    &quot;suggest.noselect&quot;: false,
    &quot;coc.preferences.diagnostic.displayByAle&quot;: true,
    &quot;suggest.floatEnable&quot;: true
}
</code></pre>
<p>使用<code>ctr+n/p</code>上下移动 回车选择补全代码</p>
<p>在<code>init.vim</code> 可选配置</p>
<pre><code class="language-shell">&quot;==============================================================================
&quot; coc.nvim 配置
&quot; Remap keys for gotos
&quot; nmap &lt;silent&gt; gd &lt;Plug&gt;(coc-definition)
nmap &lt;silent&gt; gy &lt;Plug&gt;(coc-type-definition)
nmap &lt;silent&gt; gm &lt;Plug&gt;(coc-implementation)
nmap &lt;silent&gt; gr &lt;Plug&gt;(coc-references)
inoremap &lt;expr&gt; &lt;cr&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;C-g&gt;u\&lt;CR&gt;&quot;

nnoremap &lt;silent&gt; K :call &lt;SID&gt;show_documentation()&lt;CR&gt;
function! s:show_documentation()
  if (index(['vim','help'], &amp;filetype) &gt;= 0)
    execute 'h '.expand('&lt;cword&gt;')
  else
    call CocAction('doHover')
  endif
endfunction
&quot;==============================================================================
</code></pre>
<h3 id="ale-代码错误插件">ale 代码错误插件</h3>
<p>在 <code>coc-settings.json</code>中关闭 coc的错误处理 <code>&quot;coc.preferences.diagnostic.displayByAle&quot;: true</code></p>
<p>在<code>init.vim</code>配置</p>
<pre><code class="language-shell">&quot;==============================================================================
&quot; ale 错误处理配置
let g:ale_set_highlights = 1
let g:ale_set_quickfix = 1
&quot;自定义error和warning图标
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
&quot;在vim自带的状态栏中整合ale
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
&quot;显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
&quot;打开文件时不进行检查
let g:ale_lint_on_enter = 1

&quot;普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp &lt;Plug&gt;(ale_previous_wrap)
nmap sn &lt;Plug&gt;(ale_next_wrap)
&quot;&lt;Leader&gt;d查看错误或警告的详细信息
nmap &lt;Leader&gt;d :ALEDetail&lt;CR&gt;
let g:ale_linters = {
    \ 'go': ['golint', 'go vet', 'go fmt'],
    \ }
&quot;==============================================================================
</code></pre>
<p>使用<code>sn/sp</code>在错误之间跳转</p>
<h3 id="查找-fzf">查找 fzf</h3>
<p>与本地内 fzf 联动</p>
<pre><code class="language-shell">Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
</code></pre>
<p>在<code>init.vim</code>配置</p>
<pre><code class="language-shell">map &lt;leader&gt;f :Files&lt;CR&gt;
map &lt;leader&gt;b :Buffers&lt;CR&gt;
let g:fzf_action = { 'ctrl-e': 'edit' }
&quot; 用 leader+ag 搜索当前 cursor 下单词 
nnoremap &lt;silent&gt; &lt;Leader&gt;ag :Ag &lt;C-R&gt;&lt;C-W&gt;&lt;CR&gt;
</code></pre>
<p>直接<code>leader+ag</code> 搜索当前光标下的单词</p>
<p><code>leader+f</code> 搜索项目内文件</p>
<p><code>leader+b</code>搜索 buffer 列表切换 <code>ctrl+n/p</code>选择</p>
<p>全局项目搜索：<code>:Ag</code> 在项目中查找</p>
<h3 id="others">others</h3>
<table>
<thead>
<tr>
<th>插件</th>
<th>作用</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>vim-commentary</code></td>
<td>注释插件</td>
<td><code>gcc/gc</code>注释当前行/所选代码块</td>
</tr>
<tr>
<td><code>vim-easymotion</code></td>
<td>快速移动光标</td>
<td><code>ss</code> nmap 下 ss+目标单词的 2 个字母两次 跳转到显示区域内的首目标单词</td>
</tr>
<tr>
<td><code>vim-surround</code></td>
<td>CRUD{[(“‘</td>
<td><code>di/da/ci/ca/yi/ya+*</code></td>
</tr>
<tr>
<td><code>vim-auto-pairs</code></td>
<td>成对括号</td>
<td></td>
</tr>
<tr>
<td><code>vim-ultisnips+vim-snippets</code></td>
<td>代码块生成</td>
<td><code>forr+tab</code> 即可<code>for range</code></td>
</tr>
<tr>
<td><code>tagbar</code></td>
<td>ctag</td>
<td><code>leader+t</code>显示 tag</td>
</tr>
</tbody>
</table>
<h2 id="总结">总结</h2>
<p>不建议直接 copy 巨佬们的配置</p>
<p>尽量了解每个插件的作用和快捷键，避免插件之间的快捷键冲突，在使用中记忆快捷键。</p>
<p>将 IDE 于<code>vim</code>配合使用，项目开发还是 Goland 香。</p>
<h2 id="reference">Reference</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang context 包]]></title>
        <id>https://flyingchase.github.io/post/golang-context-bao/</id>
        <link href="https://flyingchase.github.io/post/golang-context-bao/">
        </link>
        <updated>2021-10-01T03:55:53.000Z</updated>
        <content type="html"><![CDATA[<p>context 包</p>
<h1 id="context包">context包</h1>
<p>控制并发的方式：</p>
<p>​	<code>WaitGroup</code> <code>Context</code></p>
<p><strong>waitGroup</strong></p>
<ul>
<li>并发启动多个子协程，等待所有的 goroutine 完成任务 <code>wg.Wait()</code>等待所有的子协程完成后再执行后续代码</li>
<li>无法主动通知子协程的退出</li>
</ul>
<p>使用<code>channel</code>和<code>select</code>通知 goroutine 的处理</p>
<p>子协程使用 for 循环定时轮询，<code>stop</code>信道有值（可读）则退出</p>
<pre><code class="language-go">select {
    case &lt;-stop :
    	...
    	return
	default :
    	...
  
}
</code></pre>
<p>背景：</p>
<p>​	网络请求Request 需要开启 goroutine 需要去跟踪 goroutine 的方案 从而进行控制	即 goroutine 的上下文</p>
<h2 id="context"><strong>Context</strong></h2>
<ul>
<li>通知子协程退出（正常和超时）</li>
<li>传递必要参数</li>
</ul>
<p><strong>使用原则：</strong></p>
<ul>
<li>以参数形式传递 Context 且位于入口请求和出口请求链路的每个函数的首位</li>
<li>函数方法传递 Context 不可传递 nil ——&gt;tarce 追踪时断掉</li>
<li>Context 线程安全</li>
<li>Context 可传递给任意个数的 goroutine 子协程受根 context 控制</li>
</ul>
<h3 id="控制单协程">控制单协程</h3>
<p>将 chan stop 转化为 Context 追踪 goroutine</p>
<pre><code class="language-go">	// Background 返回空的 Context 作为整个 context 树的根节点
// WithCanclel(parent) 创建可取消的子 context 作为参数传递给 goroutine 进行跟踪
	ctx,cancel:=context.WithCancel(context.Background())

	go func(ctx context.Context) {
		for  {
			select {
                // Done()判断接收到值则结束
			case &lt;-ctx.Done():
				fmt.Println(&quot;quit &quot;)
				return
			default:
				fmt.Println(&quot;goroutine is under control&quot;)
				time.Sleep(2*time.Second)
			}
		}
	}(ctx)
	time.Sleep(10*time.Second)
	fmt.Println(&quot;it is time to tell ctx stop control&quot;)

	cancel()
	time.Sleep(5*time.Second)
</code></pre>
<ul>
<li><code>context.Backgroud()</code>创建根 Context 作为顶层的 Context</li>
<li><code>context.WithCancle(parent)</code> 创建可取消的子 Context 返回函数 <code>cancel</code></li>
<li>子协程中使用<code>select</code>调用<code>&lt;-ctx.Done()</code> 判断是否需要退出</li>
<li>主协程使用<code>cancle()</code>函数通知子协程退出</li>
</ul>
<h3 id="控制多协程">控制多协程</h3>
<pre><code class="language-go">ctx,cancle:=context.WithCancel(context.Background())
go reqTask(ctx,&quot;one&quot;)
go reqTask(ctx,&quot;two&quot;)
go reqTask(ctx,&quot;three&quot;)

time.Sleep(3*time.Second)
cancle()
time.Sleep(3*time.Second)

func reqTask(ctx context.Context,name string)  {
	for  {
		select {
		case &lt;-ctx.Done():
			fmt.Println(&quot;stop&quot;,name)
			return
		default:
			fmt.Println(&quot;send request: &quot;,name)
			time.Sleep(time.Second)
		}

	}

</code></pre>
<p><code>cancle()</code>终止所有的子协程</p>
<p><code>context.Context</code>是一个接口</p>
<pre><code class="language-go">type Context interface {
  Deadline() (deadline time.Time, ok bool)
  Done() &lt;-chan struct{}
  Err() error
  Value(key interface{}) interface{}
}
</code></pre>
<p><code>WithCancel()</code>返回<code>context.Context</code>接口</p>
<p><code>func WithCancel(parent Context) (ctx Context, cancel CancelFunc)</code></p>
<pre><code class="language-go">// 返回的是 parent的副本newCancleCtx
func WithCancel(parent Context) (ctx Context, cancel CancelFunc) {
	if parent == nil {
		panic(&quot;cannot create context from nil parent&quot;)
	}
	c := newCancelCtx(parent)
    // propagateCancel 是结束子context
	propagateCancel(parent, &amp;c)
	return &amp;c, func() { c.cancel(true, Canceled) }
}
//  *ctx 本身是 cancleCtx 故而是地址传递
type cancelCtx struct {
	Context

	mu       sync.Mutex            // protects following fields
	done     chan struct{}         // created lazily, closed by first cancel call
	children map[canceler]struct{} // set to nil by the first cancel call
	err      error                 // set to non-nil by the first cancel call
}
</code></pre>
<h3 id="contextwithvalue">Context.WithValue</h3>
<p>往子协程中传递参数</p>
<p>其中key应该自定义 避免内置数据类型</p>
<p><code>func WithValue(parent Context, key, val interface{}) Context</code></p>
<pre><code class="language-go">	type favKey string
	f := func(ctx context.Context, k favKey) {
		if v := ctx.Value(k); v != nil {
			fmt.Println(&quot;found value &quot;, v)
			return
		}
		fmt.Println(&quot;not found key &quot;, k)
	}

	k := favKey(&quot;language&quot;)
	ctx = context.WithValue(context.Background(), k, &quot;Go&quot;)
	f(ctx, k)
	f(ctx, favKey(&quot;color&quot;))
</code></pre>
<ul>
<li><code>WithValue()</code>创建基于<code>ctx</code>的子 context 携带值 options</li>
<li>子协程使用<code>ctx.Value(key)</code> 获取传递的值</li>
</ul>
<h3 id="常用-api">常用 API</h3>
<p><code>WithTimeout()</code>  设置超时时间（子协程最长执行时间）</p>
<pre><code class="language-go">func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)
</code></pre>
<ul>
<li>可能使得子协程在 cancle()函数之前结束</li>
<li>可使用 <code>ctx.Err()</code> 获取子协程退出原因</li>
</ul>
<p><code>WithDeadline</code> 设置控制子协程的最长推出时间</p>
<pre><code class="language-go">func WithDeadline(parent Context, d time.Time) (Context, CancelFunc)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang fmt包]]></title>
        <id>https://flyingchase.github.io/post/golang-fmt-bao/</id>
        <link href="https://flyingchase.github.io/post/golang-fmt-bao/">
        </link>
        <updated>2021-09-27T07:01:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="fmt-包">fmt 包</h1>
<h2 id="输出">输出</h2>
<ul>
<li>
<p>Fprint Fprintln Fprintf</p>
<ul>
<li>将结果写入到 w 中 返回写入的字节数</li>
<li><code>func Fprint(w io.Writer, a ...interface{})(n int, err error)</code></li>
</ul>
</li>
<li>
<p>Sprint Sprintln Sprintf</p>
<ul>
<li>转换结果以字符串形式返回</li>
<li><code>func Sprintf(format string, a ...interface{}) string</code></li>
</ul>
</li>
<li>
<p>Errorf 功能与 Sprintf 相同 字符串被包装为 error 类型</p>
</li>
</ul>
<h2 id="输入">输入</h2>
<ul>
<li>
<p>Scan Scanf Scanln</p>
<ul>
<li>从标准输入中读取 EOF 或所有 a …interface{}变量均被填充停止读入</li>
<li><code>scan</code>换行符<code>\n</code>为空白处理</li>
<li><code>scanln</code> 换行则停止扫描</li>
<li><code>scanf</code> 依据 format字符串 对数据进行解析 <code>%c</code>总是匹配下一个字符 包括空白</li>
</ul>
</li>
<li>
<p>Fscan Fscanf Fscanln</p>
<ul>
<li>从文件读取 <code>r io.Reader</code></li>
</ul>
</li>
<li>
<p>Sscan Sscanf Ssanln</p>
<ul>
<li>从字符串读取 <code>str string</code></li>
</ul>
</li>
</ul>
<pre><code class="language-go">// Scan 从标准输入中读取数据，并将数据用空白分割并解析后存入 a 提供
// 的变量中（换行符会被当作空白处理），变量必须以指针传入。
// 当读到 EOF 或所有变量都填写完毕则停止扫描。
// 返回成功解析的参数数量。
func Scan(a ...interface{}) (n int, err error)

// Scanln 和 Scan 类似，只不过遇到换行符就停止扫描。
func Scanln(a ...interface{}) (n int, err error)

// Scanf 从标准输入中读取数据，并根据格式字符串 format 对数据进行解析，
// 将解析结果存入参数 a 所提供的变量中，变量必须以指针传入。
// 输入端的换行符必须和 format 中的换行符相对应（如果格式字符串中有换行
// 符，则输入端必须输入相应的换行符）。
// 占位符 %c 总是匹配下一个字符，包括空白，比如空格符、制表符、换行符。
// 返回成功解析的参数数量。
func Scanf(format string, a ...interface{}) (n int, err error)

// 功能同上面三个函数，只不过从 r 中读取数据。
func Fscan(r io.Reader, a ...interface{}) (n int, err error)
func Fscanln(r io.Reader, a ...interface{}) (n int, err error)
func Fscanf(r io.Reader, format string, a ...interface{}) (n int, err error)

// 功能同上面三个函数，只不过从 str 中读取数据。
func Sscan(str string, a ...interface{}) (n int, err error)
func Sscanln(str string, a ...interface{}) (n int, err error)
func Sscanf(str string, format string, a ...interface{}) (n int, err error)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang error 包]]></title>
        <id>https://flyingchase.github.io/post/golang-error-bao/</id>
        <link href="https://flyingchase.github.io/post/golang-error-bao/">
        </link>
        <updated>2021-09-27T06:35:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="error-包">error 包</h1>
<p>Golang 使用 error 类型返回函数执行中遇到的错误</p>
<p><code>nil</code>表示未遇到错误，否则会返回字符串说明返回的错误信息</p>
<ul>
<li>error 只是一个接口 可以使用任意类型去实现</li>
</ul>
<pre><code class="language-go">type error interface {
    Error() interface
}
</code></pre>
<ul>
<li>
<p>error 不一定代表错误</p>
<ul>
<li>io 包内的 error 类型 io.EOF 代表数据读取结束</li>
<li>path/filepath包内 error 类型的 filepath.SkipDir 表示跳过当前目录</li>
</ul>
</li>
<li>
<p><code>errors</code>包实现最简单的 error 类型 只包含字符串</p>
<ul>
<li><code>func New(text string) error</code> New 函数生成简单的 error 对象</li>
</ul>
</li>
<li>
<p>可自定义 error 类型</p>
<pre><code class="language-go">type myError struct {
    err string
    time time.Time
    count int
}
func (m *myError)Error() string {
    return fmt.Sprintf(&quot;%s %d count, time is %v&quot;, m.err,m.count,m.time)
} 
func newError (s string , i int) {
    return &amp;myError{
        err:s,
        time:time.Now(),
        count:i,
    }
}
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Joplin 介绍]]></title>
        <id>https://flyingchase.github.io/post/joplin-jie-shao/</id>
        <link href="https://flyingchase.github.io/post/joplin-jie-shao/">
        </link>
        <updated>2021-09-08T10:27:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="joplin-介绍">Joplin 介绍</h1>
<h2 id="特色">特色</h2>
<ul>
<li>
<p>同步方式多种多样 全平台支持</p>
<ul>
<li>
<img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/image-20210908170712113.png" alt="image-20210908170712113" style="zoom:50%;" />
</li>
</ul>
</li>
<li>
<p>网页剪辑</p>
</li>
<li>
<p>开源支持 社区很好 不怕跑路 笔记加密</p>
</li>
<li>
<p>支持调用外部 mkdown编辑器</p>
</li>
<li>
<p>目录树  tag</p>
</li>
<li>
<p>to-do 模式</p>
</li>
<li>
<p>支持附件插入 地理位置</p>
</li>
<li>
<p>笔记历史版本</p>
</li>
</ul>
<h2 id="同步">同步</h2>
<p>采用 AWS S3 同步  腾讯云和阿里云对象存储均支持</p>
<ul>
<li>腾讯云
<ul>
<li>同步的储存桶名称包括 id  url 形式为<code>https://cos.whereisyourbucket.myqclound.com</code></li>
<li>秘钥和密码为私有用户权限的 API</li>
</ul>
</li>
</ul>
<h2 id="定制">定制</h2>
<ul>
<li>实现[toc]右侧鼠标悬浮 <code>cmd</code>可点击跳转</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/C5Yjiz.png" alt="C5Yjiz" loading="lazy"></figure>
<p>参考：<a href="https://lightzhan.xyz/index.php/2020/11/22/joplin-toc-customizing/">Joplin实现炫酷的侧边栏目录</a></p>
<ul>
<li>
<p>利用 typora 的 css 格式 复制到<code>~/.config/joplin-desktop</code> 即可在设置中应用（改为默认名称 userstyle.name）</p>
</li>
<li>
<p>使用 vscode Joplin 插件实现 vscode 打开 joplin 编辑 mkdown 文件</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go cheatsheet]]></title>
        <id>https://flyingchase.github.io/post/go-cheatsheet/</id>
        <link href="https://flyingchase.github.io/post/go-cheatsheet/">
        </link>
        <updated>2021-09-04T15:03:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="go-cheatsheet">Go cheatsheet</h1>
<h2 id="variables">Variables</h2>
<ul>
<li>短声明不可在函数外部
<ul>
<li>短声明至少一个新变量</li>
</ul>
</li>
<li>常量 const
<ul>
<li>可忽略类型 也可指定类型</li>
</ul>
</li>
</ul>
<p><strong>关键字</strong></p>
<ol>
<li><code>break default func interface select</code></li>
<li><code>case defer go map struct</code></li>
<li><code>chan else goto package switch</code></li>
<li><code>const fallthrough if range type</code></li>
<li><code>continue for import return var</code></li>
</ol>
<h3 id="iota">iota</h3>
<ul>
<li>
<p>枚举使用  为 const 常量赋值</p>
</li>
<li>
<p>按照 const 内的行数从 0 递增  同一行的值相等</p>
</li>
<li>
<p>每次遇见 const 重置为 0</p>
</li>
</ul>
<p>rune 是 unit32 别称</p>
<p>byte 是 unit8 别称</p>
<h3 id="make-new">make new</h3>
<h4 id="make">make</h4>
<ul>
<li>内建 map slices channel 的内存分配</li>
<li>返回有初始值的 T类型 非*T 指针</li>
</ul>
<h4 id="new">new</h4>
<ul>
<li>各种类型的内存分配</li>
<li>返回指针 指向新分配的类型的零值</li>
</ul>
<h2 id="basic-types">Basic types</h2>
<h3 id="strings">Strings</h3>
<pre><code class="language-go">// 不会将换行符\n 转化 直接输出换行
str:=`Multiline
string`
</code></pre>
<ul>
<li>字符串不可变
<ul>
<li>改变需要转化为<code>[]byte</code>类型</li>
<li>+和切片操作可以更改  <code>s=“c”+s[1:]</code></li>
</ul>
</li>
<li>再强转 string(ch)即可</li>
<li>可使用<code>+</code>链接</li>
<li></li>
</ul>
<h3 id="numbers">Numbers</h3>
<pre><code class="language-go">num1:=3
num2:=3.1
num3:=3+4i
num4:=byte('a') // byte 底层为alias unit8 

fmt.Printf(&quot;reflect.TypeOf(num1): %v\n&quot;, reflect.TypeOf(num1))
fmt.Printf(&quot;reflect.TypeOf(num2): %v\n&quot;, reflect.TypeOf(num2))
fmt.Printf(&quot;reflect.TypeOf(num3): %v\n&quot;, reflect.TypeOf(num3))
fmt.Printf(&quot;reflect.TypeOf(num4): %v\n&quot;, reflect.TypeOf(num4))

// reflect.TypeOf(num1): int
// reflect.TypeOf(num2): float64
// reflect.TypeOf(num3): complex128
// reflect.TypeOf(num4): uint8
</code></pre>
<h3 id="array">Array</h3>
<pre><code class="language-go">numbers:=[...]int{1,2,3,4,5} // 忽略数组长度 直接按照后续初始化计长
for _,num:=range numbers{
  println(num)
}
</code></pre>
<h3 id="slices">Slices</h3>
<ul>
<li><code>var slice []byte</code>
<ul>
<li>Slice[ : ：] 第一个默认位置为<code>0</code> 第二个默认位置是 len 第三个位置是容量的最后一个对应数组的下标 则 cap=(最后一位-第一位)
<ul>
<li>前闭后开</li>
</ul>
</li>
</ul>
</li>
<li>类似结构体 内含有 <em>指针（指向 数组中slice 的开始位置）、len（代表 slice长度）、cap（代表 slice 开始位置到对应数组的最后位置长度）</em>
<ul>
<li>append 追加——&gt;指针 会影响slice 指向的数组
<ul>
<li>当 slices(cap-len==0) 时slices 分配新的空间 返回新的数组指针 原数组内容不变</li>
</ul>
</li>
<li>len 长度</li>
<li>cap 容量</li>
<li>copy 复制到目标 dst 返回复制元素个数</li>
</ul>
</li>
</ul>
<h3 id="pointers">Pointers</h3>
<h3 id="map">map</h3>
<ul>
<li>字典无序 长度不固定，是引用类型</li>
<li>len 获取 key 的数量</li>
<li>不存在 k 对应的 v 返回为 bool</li>
<li><em>API</em>
<ul>
<li>delete 删除 delete(map,key)</li>
<li>v</li>
</ul>
</li>
</ul>
<h2 id="flow-control">Flow control</h2>
<ul>
<li>if内声明的变量作用域仅在代码块内</li>
<li>无 while</li>
<li>Switch 中 case 默认带 break 需要 <code>fallthrough</code></li>
</ul>
<h3 id="conditional">Conditional</h3>
<h4 id="siwtch">siwtch</h4>
<ul>
<li>switch中 Expr 与 case 的各个 expr判断必须是同类型的</li>
<li>switch 无表达式则默认为 <code>true</code></li>
<li></li>
</ul>
<h3 id="goto">Goto</h3>
<p>与 <code>Here:</code>标签搭配  必须跳转到当前函数内定义的标签</p>
<ul>
<li>标签名大小写敏感</li>
<li></li>
</ul>
<h2 id="functions">Functions</h2>
<ul>
<li>
<p>函数可作为参数传递</p>
<ul>
<li>成为嵌套函数  在函数中调用其他函数</li>
</ul>
<pre><code class="language-go">package main

import &quot;fmt&quot;
// 首先需要定义函数类型 作为其它函数的传入参数
type testInt func(int) bool
// 按照函数类型来编写函数
func isOdd(integer int) bool {
   if integer%2 == 0 {
      return false
   }
   return true
}
func isEven(integer int) bool {
   if integer%2 != 0 {
      return false
   }
   return true
}
func filter(slice []int, f testInt) []int {
   var res []int
   for _, val := range slice {
      if f(val) {
         res = append(res, val)
      }
   }
   return res
}
func main() {
   slice := []int{1, 2, 3, 4, 5, 6, 7}
   fmt.Println(slice)
   odd := filter(slice, isOdd) // 将函数作为参数传入函数
   fmt.Println(odd)
   even := filter(slice, isEven)
   fmt.Println(even)
}
</code></pre>
<ul>
<li>将函数作为参数传递要求
<ul>
<li>定义函数类型</li>
<li>要作为参数传递的函数类型与定义的函数类型相同</li>
</ul>
</li>
</ul>
<h4 id="variadic-functions-可变参数">Variadic Functions 可变参数</h4>
<ul>
<li>
<pre><code class="language-go">func funcName (nums ...int) {  // 不指定参数个数
    fmpl(nums)
    for _,num:=rang nums{
        sum+=num;
    }
    fmpl(sum)
}
func main() {
    sum(1,2)
    sum(1,2,3)
    nums:=[]int{1,2,3,4}
    sum(nums...)
}
</code></pre>
</li>
</ul>
<h4 id="closures-返回func">Closures 返回func</h4>
<ul>
<li>
<pre><code class="language-go">func intSeq() func() int{    // 函数返回值为函数
   i:=0
   return func() int {
       i++
       return i
   }
}
func main() {
   nextIntL:=intSeq()
   fmt.Println(nextIntL()) // 1
   fmt.Println(nextIntL()) //2
   fmt.Println(nextIntL())//3
   newIntL:=intSeq()
   fmt.Println(newIntL()) //1 
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="recursion">Recursion</h4>
<pre><code class="language-go">func fact (n int) int{
	if n==0 {
		return 1
	}
	return n* fact(n-1)  
}

func main(){
	fmt.Println(fact(7))  

	var fib func(n int) int  // 将函数定义为变量 

	fib=func (n int) int {
		if n&lt;2 {
			return n
		}
		return fib(n-1)+fib(n-2)
	}
	fmt.Println(fib(7))
}
</code></pre>
<h3 id="lambda">Lambda</h3>
<p><code>arg …int</code>表示函数接受不定数量的变参</p>
<p>Func myFunc (arg ..int) int{}</p>
<h3 id="defer">defer</h3>
<ul>
<li>函数执行到最后return 后  defer 逆序执行 最后返回值退出</li>
<li></li>
</ul>
<h2 id="packages">Packages</h2>
<p>两个保留函数 main 和 init</p>
<ul>
<li><code>main 函数</code>只能用于<code>package main</code> <code>init函数</code>可用于各个 package</li>
<li>两者无参数和返回值</li>
</ul>
<h3 id="点操作">点操作</h3>
<p><strong>. “packhageName”：</strong></p>
<ul>
<li>点操作含义是调用该包内函数时 可忽略前缀包名
<ul>
<li><code>fmt.Println()</code>可简写为<code>Println()</code></li>
</ul>
</li>
</ul>
<h3 id="别名操作">别名操作</h3>
<ul>
<li>将包名在本文件内作为自定义名称</li>
<li>防止冲突/易于记忆包名</li>
</ul>
<h3 id="_操作">_操作</h3>
<ul>
<li>导入该包但不直接使用包内函数 调用包内的 <code>init函数</code></li>
</ul>
<h2 id="error-control">Error control</h2>
<p>panic 和 recover 机制</p>
<h2 id="structs">Structs</h2>
<ul>
<li>
<p>匿名字段可包含对应 struct 的所有内容</p>
</li>
<li>
<p>内置类型 Int 等也可以作为匿名字段</p>
</li>
<li>
<p>内外层有重复的字段 优先访问最外层的字段</p>
</li>
</ul>
<h2 id="methods">Methods</h2>
<ul>
<li>
<p>附属在给定的 struct 上 在函数基础上加上 receiver</p>
</li>
<li>
<p>方法可与在任何自定义的类型、内置类型、struct 上</p>
<ul>
<li>type typeName typeLiteral   称 typeName 为自定义类型</li>
<li>struct 是自定义中的一种</li>
</ul>
</li>
<li>
<p>继承</p>
<ul>
<li>匿名字段的 method 可被继承 包含该匿名字段的 struct 可调用期内的 methods</li>
</ul>
</li>
<li>
<p>重写 override</p>
<ul>
<li>外部 struct 可重写内部 struct 的 methods</li>
</ul>
</li>
</ul>
<h2 id="interfaces">Interfaces</h2>
<ul>
<li>
<p>interface 可被任意对象实现</p>
</li>
<li>
<p>一个对象可实现多个 interface</p>
</li>
<li>
<p>任意类型都实现了空 interface</p>
</li>
<li>
<p>是一抽象方法的集合</p>
</li>
</ul>
<h4 id="变量存储类型">变量存储类型</h4>
<ul>
<li>断言<code>Comma-ok</code>
<ul>
<li><code>value,ok:=element(T)</code> ok 是 bool 类型 true 代表是该类型 多在 if-else 使用</li>
<li><code>switch</code> 使用<code>element.(type)</code> 作为判断和 case</li>
</ul>
</li>
</ul>
<pre><code class="language-go">type Element interface {
} // 可作用在任何类型上
type List[] Element // element 为空接口并将其自定义名称为 List[]
type Person struct {
   name string
   age int
}

func (p *Person) String() string {
   return p.name+strconv.Itoa(p.age)

}
func main() {
list:=make(List,3)
list[0] = 1
list[1] = &quot;hello&quot;
list[2]=Person{name : &quot;w&quot;,age :100}
for index,element:=range list {
   if value, ok := element.(int); ok {
      fmt.Println(index, value)
   }else if value, ok := element.(Person); ok {
      fmt.Println(index,value)
   }else if value, ok := element.(string); ok {

      fmt.Println(index,value)
   }else {
      fmt.Println(index)
   }
}
</code></pre>
<p>函数赋值给变量 函数内是空接口</p>
<pre><code class="language-go">whatAmI := func(i interface{}) {  switch t := i.(type) {  case bool:     fmt.Println(&quot;bool&quot;)  case int:     fmt.Println(&quot;int&quot;)  default:     fmt.Println(reflect.TypeOf(t))  }}whatAmI(&quot;1&quot;)whatAmI(true)whatAmI(1)whatAmI(Studnet{})
</code></pre>
<h2 id="concurrency">Concurrency</h2>
<ul>
<li>通过通信来共享而非通过共享来通信</li>
<li>goroutine 运行在相同的地址空间</li>
</ul>
<h4 id="channel">channel</h4>
<ul>
<li>
<p>channel 必须使用 make 创建并定义发送到 channel 的类型</p>
</li>
<li>
<p>cap 可以读取 channel 的缓存容量</p>
<ul>
<li>
<pre><code class="language-go">ch:=make(chan int) // 定义同时规定发送到 chan 的类型v:=1ch&lt;-v 	// 将 v 发送到 chanw:=&lt;-ch	// 从 ch中读取并赋值给 w
</code></pre>
</li>
</ul>
</li>
<li>
<p>默认无缓存chan 接受和发送是阻塞的  除非另外一端准备好</p>
<ul>
<li>
<p><code>value:&lt;-c</code> 读取会被阻塞 直到有数据接受</p>
</li>
<li>
<p><code>ch&lt;-5</code> 发送会被阻塞 直到有被读取</p>
</li>
<li>
<pre><code class="language-go">func sum(a []int, c chan int)  {   total:=0   for _,v:=range a{      total+=v   }   c&lt;-total}func main() {   a:=[...]int {1, 2, 3,4,5,6,7,8,9,0}   c:=make(chan int)   go sum(a[:len(a)/2],c)   go sum(a[len(a)/2:],c)   x,y:=&lt;-c,&lt;-c   fmt.Println(x,y,x+y)}
</code></pre>
</li>
</ul>
</li>
<li>
<p>Buffer channel 带缓存的 channel</p>
<ul>
<li>
<p><code>ch；=make(chan type,cap)</code> 在 cap 内的读写是无阻塞的 超过 cap 时候需要等待其他 goroutine 从 channel 中读取元素 释放空间</p>
</li>
<li>
<p><code>for i:=rang c</code> 可以不断读取 channel 直到 channel 被显示关闭</p>
</li>
<li>
<p><code>close</code>关闭 channel 无法发送数据 但可以在消费方通过<code>v,ok:=c;ok</code><em>断言</em>来测试是否关闭 channel</p>
<ul>
<li>在生产者方关闭 channle  在消费者方容易产生 panic</li>
<li>结束 range 循环/无数据需要发送时候关闭 channel 才使用 close显式关闭</li>
</ul>
</li>
<li>
<pre><code class="language-go">func fibonacc(n int, c chan int)  {   x,y:=1,1   for i:=0;i&lt;n;i++ {      c&lt;-x      x,y=y,x+y   }   close(c)	// 显示关闭 channel}func main() {   c:=make(chan int, 10)   go fibonacc(cap(c),c)   for i:=range c {      fmt.Println(i)   }}
</code></pre>
</li>
</ul>
</li>
<li>
<p>多 channel 下 <em>select</em></p>
<ul>
<li>
<p>select 关键字监听 channel 上的数据流动</p>
</li>
<li>
<p>默认是阻塞的  只有监听的 channel 上数据流动才运行  多个 channel 准备好时select 随机选择执行</p>
</li>
<li>
<p>类似 switch 有 <code>default</code>   可设置超时来退出循环</p>
</li>
<li>
<pre><code class="language-go">func fibonacc(c, quit chan int) {   x, y := 1, 1   for {      select {		// 类似 switch  监听 channel 上的数据流动      case c &lt;- x:         x, y  = y, x+y      case &lt;-quit:         fmt.Println(&quot;quit&quot;)         return      case &lt;-time.After(5*time.Second) // 阻塞超过5 s情况          fmpl(&quot;timeOut&quot;)          break;      }   }}func main() {   c := make(chan int)   quit:=make(chan int)   go func() {      for i := 0; i &lt; 10; i++ {         fmt.Println(&lt;-c)      }      quit&lt;-0   }()   fibonacc(c,quit)}
</code></pre>
</li>
</ul>
</li>
<li>
<p><code>Goexit</code></p>
<ul>
<li>退出当前 Goroutine 但defer 仍调用</li>
</ul>
</li>
<li>
<p><code>Gosched</code></p>
<ul>
<li>让出 goRoutine 权限</li>
</ul>
</li>
<li>
<p><code>NumCPU</code> <code>NumGoroutine</code></p>
<ul>
<li>返回 cpu数目</li>
<li>返回执行和排队的任务总数</li>
</ul>
</li>
<li>
<p><code>GOMAXPROCS</code></p>
<ul>
<li>并行计算的 cpu 核数最大值 返回之前的核数值</li>
</ul>
</li>
</ul>
<h2 id="references">References</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go web 基础]]></title>
        <id>https://flyingchase.github.io/post/go-web-ji-chu/</id>
        <link href="https://flyingchase.github.io/post/go-web-ji-chu/">
        </link>
        <updated>2021-09-04T15:02:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="go-web基础">Go Web基础</h1>
<h2 id="web-概念">web 概念</h2>
<h3 id="request">Request</h3>
<p>include post , get , cookie,  url</p>
<h3 id="response">Response</h3>
<h3 id="conn">Conn</h3>
<p>用户的每次请求链接</p>
<h3 id="handler">Handler</h3>
<p>处理请求和生成返回信息的处理逻辑</p>
<h2 id="http-包执行流程">Http 包执行流程</h2>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/image-20210903113614403.png" alt="image-20210903113614403" loading="lazy"></figure>
<ul>
<li>创建 Listen Socket 监听窗口</li>
<li>Listen Socket 接收客户端请求——&gt;client Socket</li>
<li>Client socket 读取 HTTP请求的协议头 交给对象的 handler 处理 再通过 client socket 写给客户端</li>
</ul>
<h4 id="监听端口">监听端口</h4>
<ul>
<li><code>ListenAndServe</code><br>
初始化 serve 对象，调用<code>net.Listen(&quot;tcp&quot;,addr)</code> 底层使用 tcp 协议搭建服务来监听端口</li>
<li></li>
</ul>
<h4 id="接收客户端请求">接收客户端请求</h4>
<ul>
<li>
<p>调用<code>srv.Serve(net.Listener)</code>函数</p>
</li>
<li>
<p>每次请求创建 Conn</p>
</li>
</ul>
<h4 id="分配-handler">分配 Handler</h4>
<ul>
<li>conn 解析 request <code>c.readRequest()</code> 获取 handler 即为调用 ListenAndServe 的第二个参数
<ul>
<li>为空 nil 则默认<code>handler=DefaultServeMax</code>  为路由器 匹配 url 跳转到对应的 handle 函数</li>
<li>路由请求规则<code>“/”</code>：
<ul>
<li>跳转到 <code>http.HandleFunc(&quot;/&quot;,selfFunc)</code> 中的自定义函数</li>
<li>DefaultServeMux 调用 ServeHTTP 方法 内部及调用 selfFunc</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="实战">实战</h1>
<h2 id="创建-web-server">创建 web server</h2>
<p>使用 http.ListenAndServer()</p>
<ul>
<li>
<p>第一个参数网络地址</p>
<ul>
<li>“” 则为所有网络接口的 80 端口</li>
</ul>
</li>
<li>
<p>第二个参数 handler</p>
<ul>
<li>nil 则为 DefaultServeMux(multipledxer) 看做路由器</li>
</ul>
</li>
</ul>
<p>使用http.Server</p>
<ul>
<li>struct
<ul>
<li>Addr 字段表示网络地址</li>
<li>Handler 字段
<ul>
<li>nil defaulSerMux</li>
</ul>
</li>
<li>ListenAndServe() 方法</li>
</ul>
</li>
</ul>
<pre><code class="language-go">// way One 
http.ListenAndServe(&quot;localhost:9090&quot;,nil)
// way Two
server:=http.Server{Addr: &quot;localhost:8080&quot;,Handler: nil}
server.ListenAndServe()
</code></pre>
<p>以上只能执行 http 而非 https</p>
<p>需要分别加上：</p>
<ul>
<li>http.ListenAndServeTLS()</li>
<li>Server.ListenAndServeTLS()</li>
</ul>
<h4 id="handler-2">Handler</h4>
<p>是一个 interface 接口</p>
<ul>
<li>
<p>定义了一个方法ServeHTTP()</p>
<ul>
<li>HTTPResponseWriter</li>
<li>指向 Request（struct）的指针</li>
</ul>
<pre><code class="language-go">type Handler interface {
   ServeHTTP(ResponseWriter, *Request)
}
</code></pre>
</li>
</ul>
<h4 id="defaultservemux">DefaultServeMux</h4>
<p>Multiplexer 多路复用器（可被视为路由器） 是 ServerMux 的一个指针变量</p>
<ul>
<li>也是一个 Handler</li>
<li>转发调用其他 handler</li>
<li>调用 http.Handle 函数实际上调用的是 DefaultServeMux 上的 Hanler 方法</li>
</ul>
<p>不指定 server struct 中的 handler 字段值</p>
<ul>
<li>可以使用 http.Handle 将某个 Handler 附加到 DefaultServeMux
<ul>
<li>http 包有一个 Handle 函数</li>
<li>ServerMux struct 也有一个 Handle 方法</li>
</ul>
</li>
</ul>
<h4 id="httphandle">http.Handle</h4>
<p>func Handle(pattern string, handler Handler)</p>
<ul>
<li>
<p>第二个参数是 handler（注意是<em>指针</em>）</p>
<pre><code class="language-go">type Handler interface {
 ServeHTTP(ResponseWriter, *Request)
// 实现 ServerHTTP 方法的类型均可视为 handler
 }
</code></pre>
</li>
</ul>
<pre><code class="language-go">server := http.Server{
   Addr: &quot;localhost:1090&quot;,
   Handler: nil,  // use DefaultServeMux
}
http.Handle(&quot;/wo&quot;,&amp;mh)
server.ListenAndServe()
</code></pre>
<h4 id="httphandlefunc">http.HandleFunc</h4>
<p>Handler函数行为与hanlder 类似 将 f 适配为 handler 使得handler 具有方法 f  类似<em>类型转换</em></p>
<p>作用即为： Handler 函数转化为 Handler 内部还是调用 http.Handle 函数</p>
<ul>
<li>Handler 函数的签名与 ServeHTTP 方法的签名一样，接收：
<ul>
<li>一个 http.ResponseWriter</li>
<li>一个 指向 http.Request 的指针</li>
</ul>
</li>
</ul>
<pre><code class="language-go">// 第二个参数是 func 但是不要带()  带（）就直接执行了
http.HandleFunc(&quot;/home&quot;,welcome)

func welcome(w http.ResponseWriter, r *http.Request) {
   w.Write([]byte(&quot;Home!&quot;))
}
</code></pre>
<p>HandleFunc 源码：</p>
<pre><code class="language-go">func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
    // 调用 DefaultServeMux 的 HandleFunc
   DefaultServeMux.HandleFunc(pattern, handler) 
}

// DefaultServeMux 的 HandleFunc 第二个参数是 Handler函数（不同于 http.Handle 第二个参数是 Handler）
func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
	if handler == nil {
		panic(&quot;http: nil handler&quot;)
	}
    // 内部还是调用 http.Handle 函数
	mux.Handle(pattern, HandlerFunc(handler))
}
</code></pre>
<h2 id="内置-handlers">内置 Handlers</h2>
<h3 id="notfoundhandler">NotFoundHandler</h3>
<pre><code class="language-go">// NotFound replies to the request with an HTTP 404 not found error.
func NotFound(w ResponseWriter, r *Request) { Error(w, &quot;404 page not found&quot;, StatusNotFound) }

// NotFoundHandler returns a simple request handler
// that replies to each request with a ``404 page not found'' reply.
func NotFoundHandler() Handler { return HandlerFunc(NotFound) }
</code></pre>
<p>给每个请求的响应均为404</p>
<h3 id="redirecthandler">RedirectHandler</h3>
<pre><code class="language-go">// Redirect to a fixed URL
type redirectHandler struct {
   url  string
   code int
}

// The provided code should be in the 3xx range and is usually
// StatusMovedPermanently, StatusFound or StatusSeeOther.
func RedirectHandler(url string, code int) Handler {
	return &amp;redirectHandler{url, code}
}
</code></pre>
<p>将每个请求使用给定的状态码code——&gt;指定的 url 跳转到提供的第一个参数</p>
<h3 id="stripprefix">StripPrefix</h3>
<pre><code class="language-go">func StripPrefix(prefix string, h Handler) Handler
</code></pre>
<p>从请求的 URL去掉指定的前缀prefix 再调用第二个参数 handler h</p>
<ul>
<li>请求的 URL 与前缀 prefix 不符合 404</li>
<li>h handler 将会在 请求 url 被去除 prefix 后调用 用于接收请求</li>
</ul>
<h3 id="timeouthandler">TimeoutHandler</h3>
<pre><code class="language-go">func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler
</code></pre>
<ul>
<li>time.Duration 表示一段时间 alias int64 的别名</li>
<li>返回 handler 在指定时间 dt duration 内运行传入的 h
<ul>
<li>h 将要被修饰的 handler</li>
<li>msg 超时则返回 msg 信息表示响应时间过长</li>
<li>dt 处理 h 的允许时间</li>
</ul>
</li>
</ul>
<h3 id="fileserver">FileServer</h3>
<pre><code class="language-go">func FileServer(root FileSystem) Handler
</code></pre>
<p>返回 handler 基于 root 文件系统来响应请求  root 是字符串作为根目录</p>
<pre><code class="language-go">// filestystem 可以自定义  通常委托给 
type FileSystem interface {
   Open(name string) (File, error)
}
</code></pre>
<p>eg 使用内置 filehandler 实现 handleFunc</p>
<pre><code class="language-go">http.HandleFunc(&quot;/&quot;,func(w http.ResponseWriter, r *http.Request) {
      http.ServeFile(w,r,&quot;wwwroot&quot;+r.URL.Path)
   })
   
http.ListenAndServe(&quot;:9090&quot;,nil)
http.ListenAndServe(&quot;8080&quot;,http.FileServer(http.Dir(&quot;wwwwroot&quot;)))
</code></pre>
<h2 id="请求-request">请求 Request</h2>
<h3 id="http-请求">HTTP 请求</h3>
<h3 id="request-2">Request</h3>
<h3 id="url">URL</h3>
<p>请求信息的第一行里面的信息</p>
<p>指向 url&gt;URL类型的指针 url&gt;URL 是一个 struct</p>
<p>scheme://[userinfo@]host/path[?query][#fragment]通用格式</p>
<p><em>Query</em></p>
<ul>
<li>查询字符串</li>
</ul>
<h3 id="header">Header</h3>
<p><code>map[string]/[]string</code>类型</p>
<p>设置 key 时候创建空的[]string 作为 value 第一个元素就是新的 header 值</p>
<p>key 添加元素执行 append 操作</p>
<h3 id="body">Body</h3>
<p>io.ReadCloser 接口</p>
<ul>
<li>
<p>reader 接口</p>
<ul>
<li>[]byte 返回 byte 的数量 可选的错误</li>
</ul>
</li>
<li>
<p>closer 接口</p>
<ul>
<li>返回可选的错误</li>
</ul>
</li>
</ul>
<h2 id="upload">UpLoad</h2>
<h3 id="form-表单">Form 表单</h3>
<h4 id="表单发送请求">表单发送请求</h4>
<ul>
<li>
<p>html 表单里面的数据以 name-value 对的形式 通过 method 规定post/get请求发送出去</p>
</li>
<li>
<p>数据内容存储在 POST 请求的 Body里面</p>
<ul>
<li>
<p>name-value 对的格式 通过表单的<code>Content Type</code>指定 <code>enctype</code>属性</p>
</li>
<li>
<p>entry 属性默认值 <code>application/x-www-form-urlcoded</code></p>
</li>
<li>
<p>enrty 属性设置为<code>multipart/form-data</code>   (大量数据、上传文件)</p>
<ul>
<li>每个 name-value 对转换为 MIME消息 每部分各自有 Content Type 和 Content Disposition</li>
</ul>
</li>
</ul>
</li>
<li>
<p>method 属性设置 POST 和 GET</p>
<ul>
<li>GET 请求没有 Body     数据通过 URL 编码的 name-value 对发送</li>
</ul>
</li>
</ul>
<h4 id="form-字段">Form 字段</h4>
<ul>
<li>
<p>Request 上的函数允许我们从 URL 或/和 Body 中提取数据，通过这些字段：</p>
<ul>
<li>Form  是 url.Values 类型——&gt;type Values map[string][]string 类型</li>
<li>PostForm</li>
<li>MultipartForm</li>
</ul>
</li>
<li>
<p>Form 里面的数据是 key-value 对</p>
<ul>
<li>每个 key 对应一个切片 可以有多个值</li>
</ul>
</li>
<li>
<p>通常的做法是：</p>
<ul>
<li>调用 ParseForm 或 ParseMultipartForm 来解析 Request</li>
<li>相应的访问 Form、PostForm 或 MultipartForm 字段</li>
</ul>
</li>
<li>
<pre><code class="language-go">func main() {
	server:=http.Server {
		Addr : &quot;localhost:8080&quot;,
	}
	http.HandleFunc(&quot;/process&quot;, func(w http.ResponseWriter,r *http.Request){
		r.ParseForm() // 解析 request

		fmt.Fprintln(w,r.Form)
	})
	server.ListenAndServe()
}

// index.html 输出 是一个 map[string][]string
// map[first_name:[wo] last_name:[456] uploaded:[Go Web.md]]
</code></pre>
</li>
</ul>
<h4 id="postform-字段">PostForm 字段</h4>
<p>只读取表单的 key-value 对 不需读取 url 的 kv 对  使用 PostForm 字段</p>
<p>当 url 和 form 中均有 key对应的 Value 时候 Form 字段显示所有的 values 表单在前 url 在后</p>
<pre><code class="language-html">map[first_name:[D] firtst_name:[Nick] last_name:[as]]  // D 为表单 Nick 为 url
</code></pre>
<ul>
<li>只支持<code>&quot;application/x-www-form-urlencoded&quot;</code></li>
</ul>
<pre><code class="language-go">fmt.Fprintln(w,r.PostForm)  // 使用 PostForm字段
// map[first_name:[qw] last_name:[q]]   只显示表单输入的 key对应的 values
</code></pre>
<h4 id="multipartform-字段">MultipartForm 字段</h4>
<ul>
<li>首先调用<code>ParseMultipartForm</code> 方法
<ul>
<li>该方法会在必要时调用 <code>ParseForm</code>方法
<ul>
<li>参数是需要读取数据的长度 字节数</li>
<li>MultipartForm 只包含<em>表单</em>的 key-value 对</li>
<li>返回类型是一个 struct 而不是 map。这个 struct 里有两个 map：
<ul>
<li>key 是 string，value 是 []string</li>
<li>空的（key 是 string，value 是文件）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code class="language-go">func main() {
   server:=http.Server {
      Addr : &quot;localhost:8080&quot;,
   }
   http.HandleFunc(&quot;/process&quot;, func(w http.ResponseWriter,r *http.Request){
      r.ParseMultipartForm(1024) // 解析 request  使用 ParseMultipartForm 解析 需要传入长度（字节数）

      fmt.Fprintln(w,r.MultipartForm) 
   })
   server.ListenAndServe()
}
// index 输出  struct 两个 map 第一个有数据第二个是空的
&amp;{map[first_name:[12] last_name:[12]] map[]}
</code></pre>
<h4 id="formvaluepostformvalue-字段">FormValue&amp;PostFormValue 字段</h4>
<p>FormValue 方法会返回 Form 字段中指定 key 对应的<em>第一个 value</em></p>
<ul>
<li>无需调用 ParseForm 或 ParseMultipartForm</li>
</ul>
<p>PostFormValue 方法只能读取 PostForm</p>
<ul>
<li>FormValue 和 PostFormValue 都会调用 ParseMultipartForm 方法</li>
<li>表单的 <code>enctype</code> 设为 multipart/form-data，无法通过 FormValue 获得想要的值。</li>
</ul>
<h4 id="文件-files">文件 Files</h4>
<ul>
<li>
<p>调用 <code>ParseMultipartForm</code> 方法</p>
</li>
<li>
<p>从 <code>File</code>字段获得 FileHeader 调用 Open 方法获得文件</p>
</li>
<li>
<p>使用<code>ioutil.ReadAll</code>函数将文件内容读取到 []byte中</p>
<pre><code class="language-go">func process(w http.ResponseWriter, r *http.Request) {
   r.ParseMultipartForm(1024) // 最大传递字节
   fileHead := r.MultipartForm.File[&quot;uploaded&quot;][0] // 读取指定 body 内容
   file, err := fileHead.Open()
   if err == nil {
      data, err := ioutil.ReadAll(file)
      if err == nil {
         fmt.Fprintln(w, string(data))
      }
   }
}

func main() {
   server := http.Server{
      Addr: &quot;localhost:8080&quot;,
   }
   http.HandleFunc(&quot;/process&quot;, process)
   server.ListenAndServe()
}
</code></pre>
</li>
</ul>
<p><em>FormFile</em></p>
<ul>
<li>返回对应 Key的第一个文件
<ul>
<li>返回指定 Key 的第一个 Value</li>
</ul>
</li>
</ul>
<h4 id="post-json">POST Json</h4>
<h4 id="multipartreader">MultipartReader</h4>
<pre><code class="language-go">func (r *Request) MultipartReader() (*multipart.Reader, error)
</code></pre>
<pre><code class="language-go">type ResponseWriter interface {   Header() Header   Write([]byte) (int, error)   WriteHeader(statusCode int)}// 是一个接口 response 实现了其内部的所有函数 所以 ResponseWriter 可视为 response 的指针
</code></pre>
<h3 id="responsewrite">ResponseWrite</h3>
<h3 id="内置-response">内置 Response</h3>
<ul>
<li>NotFound 函数，包装一个 404 状态码和一个额外的信息</li>
<li>ServeFile 函数，从文件系统提供文件，返回给请求者</li>
<li>ServeContent 函数，它可以把实现了 io.ReadSeeker 接口的任何东西里面的内容返回给请求者</li>
<li>还可以处理 Range 请求（范围请求），如果只请求了资源的一部分内容，那么 ServeContent 就可以如此响应。而 ServeFile 或 io.Copy 则不行。</li>
<li>Redirect 函数，告诉客户端重定向到另一个 URL</li>
</ul>
<pre><code class="language-go">func process(w http.ResponseWriter, r *http.Request) {   r.ParseMultipartForm(1024)                      // 最大传递字节   fileHead := r.MultipartForm.File[&quot;uploaded&quot;][0] // 读取指定 body 内容   file, err := fileHead.Open()   if err == nil {      data, err := ioutil.ReadAll(file)      if err == nil {         fmt.Fprintln(w, string(data))      }   }}func writeExample(w http.ResponseWriter, r *http.Request) {   str := `&lt;html&gt;&lt;head&gt;&lt;title&gt;Go Web&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;`   w.Write([]byte(str))}func writeHeaderExampl(w http.ResponseWriter, r *http.Request) {   w.WriteHeader(501)   fmt.Fprintln(w, &quot;No such service, try next door&quot;)}func main() {   server := http.Server{      Addr: &quot;localhost:8080&quot;,   }   http.HandleFunc(&quot;/write&quot;, writeHeaderExampl)   http.HandleFunc(&quot;/redirect&quot;, headerEXample)   http.HandleFunc(&quot;/json&quot;, jsonExample)   server.ListenAndServe()}func headerEXample(w http.ResponseWriter, r *http.Request) {   w.Header().Set(&quot;Location&quot;, &quot;http://google.com&quot;)   w.WriteHeader(302)}type Post struct {   User    string   Threads []string}func jsonExample(w http.ResponseWriter, r *http.Request) {   w.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)   post := &amp;Post{      User : &quot;wlzhou&quot;,      Threads: []string {&quot;first&quot;,&quot;second&quot;,&quot;third&quot;},   }   json,_:=json.Marshal(post)   w.Write(json)}
</code></pre>
<h2 id="模板">模板</h2>
<p>Web 模板即为 HTML 页面（预先设置好的）</p>
<p><code>text/template</code> <code>html/template</code>模板库</p>
<h3 id="模板引擎">模板引擎</h3>
<p>合并模板和上下文数据产生 HTML</p>
<ul>
<li>生成 HTML 写入<code>ResponseWriter</code> 再加入 HTTP响应返回给客户端</li>
<li><img src="https://cdn.jsdelivr.net/gh/flyingchase/Private-Img@master/uPic/IG3Raz.png" alt="IG3Raz" loading="lazy"></li>
</ul>
<p><em>ParseFiles</em></p>
<ul>
<li>解析模板文件 创建解析好的模板 struct</li>
<li>是 template struct 上的 ParseFiles 上的方法调用</li>
</ul>
<p>创建新的模板 名称为文件名</p>
<pre><code class="language-go"> t, _ := template.ParseFiles(&quot;tmpl.html&quot;)
</code></pre>
<p><em>ParseGlob</em></p>
<ul>
<li>
<p>模式匹配  根目录下匹配</p>
<pre><code class="language-go"> t, _ := template.ParseGlob(&quot;*.html&quot;)
</code></pre>
</li>
</ul>
<p><em>Parse</em></p>
<ul>
<li>上述两个函数均会调用</li>
</ul>
<h3 id="action">Action</h3>
<p>模板中嵌入的命令 两组花括号之间{{}}</p>
<p>条件 迭代 设置 包含 定义</p>
<h3 id="参数-管道-变量">参数、管道、变量</h3>
<p><em>参数：</em></p>
<ul>
<li>模板中的值
<ul>
<li>bool 整数 string struct key 变量 方法</li>
</ul>
</li>
</ul>
<p><em>管道：</em></p>
<p>Unix 管道类似</p>
<ul>
<li>把参数输出发送到下一个参数</li>
<li>|隔开</li>
</ul>
<h3 id="函数">函数</h3>
<p>内置函数有：</p>
<p>​	define template block html js urlquery</p>
<p>index print len with</p>
<p>自定义函数：</p>
<pre><code class="language-go">template.Funcs(funcMap FuncMap) *Templatetype FuncMap map[string]interface{}
</code></pre>
<h3 id="模板组合">模板组合</h3>
<h2 id="路由">路由</h2>
<p>Controller</p>
<ul>
<li>Main() 设置类工作</li>
<li>Controller：
<ul>
<li>静态资源</li>
<li>不同的请求发送给不同的 controller 处理</li>
</ul>
</li>
</ul>
<h3 id="路由参数">路由参数</h3>
<ul>
<li>
<p>静态路由：</p>
<ul>
<li>一个路径对应一个页面
<ul>
<li>/home /index</li>
</ul>
</li>
</ul>
</li>
<li>
<p>带参路由：</p>
<ul>
<li>依据路由参数 创建出一族不同的页面
<ul>
<li>/companies/123</li>
<li>/companies/homeAbout</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
</feed>